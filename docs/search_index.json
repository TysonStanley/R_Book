[
["chapter-4-basic-analyses.html", "Chapter 4: Basic Analyses ANOVA Linear Modeling When Assumptions Fail", " Chapter 4: Basic Analyses In this chapter we are going to demonstrate basic modeling in R. Lucky for us, R is built for these analyses. It is actually quite straight-forward to run these types of models and analyze the output. Not only that, but there are simple ways to compare models. We will go through the ANOVA family of analyses, the linear regression framework, and look at diagnostics of each. ANOVA ANOVA stands for analysis of variance. It is a family of methods (e.g. ANCOVA, MANOVA) that all share the fact that they compare a continuous dependent variable by a grouping factor variable (and may have multiple outcomes or other covariates). \\[ Y_i = \\alpha_0 + \\alpha_1 \\text{Group}_i + e_i \\] Since the groups are compared using “effect coding,” the \\(\\alpha_0\\) is the grand mean and each of the group level means are compared to it. To run an ANOVA model, you can simply use the aov function. In the example below, we are analyzing whether family size (although not fully continuous it is still useful for the example) differs by race. df$race &lt;- factor(df$ridreth1, labels=c(&quot;MexicanAmerican&quot;, &quot;OtherHispanic&quot;, &quot;White&quot;, &quot;Black&quot;, &quot;Other&quot;)) df$famsize &lt;- as.numeric(df$dmdfmsiz) fit &lt;- aov(famsize ~ race, df) anova(fit) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 1735 433.76 146.87 &lt; 2.2e-16 *** ## Residuals 9751 28798 2.95 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We make sure the variables are the right type, then we use the aov function. Inside of the function we have what is called a formula. It has the general structure: leftside ~ rightside. Generally, the left side is an outcome variable and the right side is the predictor (i.e. independent) variable. Here, we have race predicting famsize. We assign the model to the name fit which is a common way of denoting it is a model. Finally, we use the anova function to output a nice ANOVA table. In the output we see the normal ANOVA table and we can see the p-value (Pr(&gt;F)) is very, very small and thus is quite significant. We can look at how the groups relate using a box plot. We will be using some of the practice you got in Chapter 3 using ggplot2 for this. library(ggplot2) ggplot(df, aes(x=race, y=famsize)) + geom_boxplot(aes(color=race)) + scale_color_manual(guide=FALSE, values=c(&quot;dodgerblue3&quot;, &quot;coral2&quot;, &quot;chartreuse4&quot;, &quot;darkorchid&quot;, &quot;firebrick2&quot;)) + theme_bw() This immediately gives us an idea of where some differences may be occuring. It would appear that “White” and “MexicanAmerican” groups are different in family size. Assumptions We also would like to make sure the assumptions look like they are being met. In ANOVA, we want the residuals to be distributed normally, the variance of each group should be approximately the same, the groups are assumed to be randomly assigned, and the sample should be randomly selected as well. In R we can get some simple graphical checks using plot. All we provide is our ANOVA object (here it is fit). The line before it par(mfrow=c(1,2)) tells R to have two plots per row (the 1 means one row, 2 means two columns). par(mfrow=c(1,2)) plot(fit) Here, it looks like we have a problem with normality (see the Normal Q-Q plot). Those dots should approximately follow the dotted line, which is not the case. In the first plot (Residuals vs. Fitted) suggests we have approximate homoskedasticity. Linear Modeling Linear regression is nearly identical to ANOVA. In fact, a linear regression with a continuous outcome and categorical predictor is exactly the same (if we use effect coding). For example, if we run the same model but with the linear regression function lm we get the same ANOVA table. fit2 &lt;- lm(famsize ~ race, df) anova(fit2) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 1735 433.76 146.87 &lt; 2.2e-16 *** ## Residuals 9751 28798 2.95 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Surprise! It is the same as before. Here we can also use the summary function and we get the coefficients in the model as well (using dummy coding). The first level of the categorical variable is the reference group (the group that the others are compared to). We also get the intercept (in this case, the average value of the reference group). summary(fit2) ## ## Call: ## lm(formula = famsize ~ race, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.4487 -1.4487 -0.1097 1.3415 3.8903 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.44871 0.04669 95.290 &lt;2e-16 *** ## raceOtherHispanic -0.66339 0.07017 -9.454 &lt;2e-16 *** ## raceWhite -1.33905 0.05633 -23.772 &lt;2e-16 *** ## raceBlack -0.87845 0.05727 -15.338 &lt;2e-16 *** ## raceOther -0.79023 0.06284 -12.575 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.719 on 9751 degrees of freedom ## Multiple R-squared: 0.05683, Adjusted R-squared: 0.05644 ## F-statistic: 146.9 on 4 and 9751 DF, p-value: &lt; 2.2e-16 Assumptions Comparing Models Often when running linear regression, we want to compare models and see if one fits significantly better than another. We also often want to present all the models in a table to let our readers compare the models. We will demonstrate both. Compare Statistically Compare in a Table Two main packages allow us to compare models. When Assumptions Fail There are many things we can try when our assumptions fail. In my opinion, the best and most interpretable way is to use a Generalized Linear Model (GLM) which is discussed in the next chapter. There are a few other things you can try which I’ll show here. But, keep in mind that these things can cause other problems. For example, to fix normality we may accidentally cause heteroskedasticity. With that in mind, here are some common methods to help a model fit better. Log-Linear, Log-Log, Linear-Log, Other Sounds like a great tongue-twister? Well, it is but it’s also three ways of specifying (i.e. deciding what is in) your model better. Log-Linear is where we adjust the outcome variable by a natural log transformation. This is done easily in R: df$log_outcome &lt;- log(df$outcome) lm(log_outcome ~ var1, data=df) Log-Log is where we adjust both the outcome and the predictor variable with a log transformation. This is also easily done: df$log_outcome &lt;- log(df$outcome) df$log_var1 &lt;- log(df$var1) lm(log_outcome ~ log_var1, data=df) Linear-Log is where we adjsut just the predictor variable with a log transformation. And, you guessed it, this is easily done in R: df$log_var1 &lt;- log(df$var1) lm(outcome ~ log_var1 + var2, data=df) Other methods such as square rooting the outcome or using some power function (e.g. square, cube) are also quite common. There are functions that look for the best transformation to use. However, I will not cover it here since I think GLM’s are better. So if you want to learn about other ways to help your linear model go to the next chapter. "]
]
