[
["index.html", "R for Health, Behavioral, and Social Scientists Preface Part I Part II Part III Download R and RStudio", " R for Health, Behavioral, and Social Scientists Tyson S. Barrett 2017-02-09 Preface “If I have seen further, it is by standing on the shoulders of giants.” — Isaac Newton, circa 1676 Science. It is built on replication and construction. Once an idea is established and well replicated, the next steps are to build on to it. We try to build from a foundation established by others. It should also be how we analyze our data, not only in methodology but also in software. Lucky for us, R is how we do just that. This book is for beginners in R; especially those in health, behavioral and social sciences. R is wonderfully unique. It is an open source project and improvements—known as packages—are being made by smart individuals across the globe. We’ll introduce you to many ways in which R can be used in your work. You’ll find that it can help in all facets of your data analysis and communication, while improving your replicability. In the long run, taking some time to learn a knew tool will save you time, energy, and probably most importantly, frustration. When a researcher is frustrated, it becomes so easy to overlook important features. We will quickly, and succinctly, introduce the newest, easiest, and most understandable ways of working with your data. To do this, we will have three main parts: 1) working with and simple analyses of your data, 2) modeling your data, and 3) more advanced techniques to help your workflow. Part I Chapter 1: Introduces the basics of the language Chapter 2: Manipulate Your Data (reshape, subset, join) Chapter 3: Understanding your data (summary statistics, ggplot2) Part II Chapter 4: Basic Analyses (ANOVA, Linear Regression) Chapter 5: Generalized Linear Models Chapter 6: Mulilevel Modeling Chapter 7: Other Modeling Techniques Part III Chapter 8: Advanced data manipulation Chapter 9: Advanced plotting Chapter 10: Where to go from here At the end of the book, you should be able to: 1) use R to perform your data manipulation and data analyses and 2) understand online helps (e.g. www.stackoverflow.com, www.r-bloggers.com) so your potential in R becomes nearly limitless. Download R and RStudio To begin, you will need to download the R software www.r-project.org and then the RStudio software www.rstudio.com. R is the brains and RStudio1 is an “IDE” (something that helps us work with R much more easily). Once both are installed (helps on installing the software can be found on www.rstudio.com, www.r-bloggers.com, and www.statmethods.net) you are good to go. The remainder of the book will be about actually using it. Enjoy!2 Get the free version of Rstudio. Believe me, it doesn’t feel like it should be free software.↩ Note that to return to Tyson’s blog, you can click here↩ "],
["chapter-1-the-basics.html", "Chapter 1: The Basics Objects, Data Types and Functions Importing Data Saving Data Conclusions", " Chapter 1: The Basics “Success is neither magical nor mysterious. Success is the natural consequence of consistently applying the basic fundamentals.” — Jim Rohn Let’s jump right into it. R is an open source statistical software made by statisticians. This means it generally speaks the language of statistics. This is very helpful when it comes running analyses but can be confusing when starting to understand the code. Because learning code is best through experience, we’ll start with a simple walk-through of data types, functions, and objects. Early Advice: Don’t get overwhelmed. It may feel like there is a lot to learn, but taking things one at a time will work surprisingly quickly. I’ve designed this book to discuss what you need to know from the beginning. Other topics that are not discussed are things you can learn later and do not need to be of your immediate concern. Objects, Data Types and Functions Objects R uses objects and operators. An object, just like in the physical world, is something you can do things with. In the real world, we have objects that we use regularly. For example, we have chairs. Chairs are great for some things (sitting, sleeping) and horrible at others (driving, flying). Similarly, in R each type of object is useful for certain things. The data types we just discussed are certain types of objects. The data frames objects are a very good way to store data in an easily analyzable format. Because this is so analogous to the real world, it becomes quite natural to work with. You can have many objects in memory, which allows flexbility in analyzing many different things simply within a single R session. For your work, the first thing you work with will be data in various forms. Below, we explain the different data types and how they can combine into what is known as a data.frame. Data Types In R there are three main data types that you’ll work with in research: numeric factor character The first, numeric, is just that: numbers. In R, you can make a numeric variable with the code below: x &lt;- c(10.1, 2.1, 4.6, 2.3, 8.9) The c() is a function 3 that stands for “concatenate” which basically glues the values inside the paratheses together into one. We use &lt;- to put it into x. So in this case, x (which we could have named anything) is saving those values so we can work with them4. A factor variable is a categorical variable (i.e., only a limited number of options exist). For example, race/ethnicity is a factor variable. race &lt;- c(1, 3, 2, 1, 1, 2, 1, 3, 4, 2) The code above actually produces a numeric vector (since it was only provided numbers). We can quickly tell R that it is indeed supposed to be a factor. race &lt;- factor(race, labels = c(&quot;white&quot;, &quot;black&quot;, &quot;hispanic&quot;, &quot;asian&quot;)) The factor() function tells R that the first thing race is actually a factor. The additional argument labels tells R what each of the values means. If we print out race we see that R has replaced the numeric values with the labels. race ## [1] white hispanic black white white black white ## [8] hispanic asian black ## Levels: white black hispanic asian Finally, and maybe less relevantly, there are character variables. These are words (known as strings). In research this is often where subjects give open responses to a question. ch &lt;- c(&quot;I think this is great.&quot;, &quot;I would suggest you learn R.&quot;, &quot;You seem quite smart.&quot;) When we combine multiple variables into one, we create a data.frame. A data frame is like a spreadsheet table, like the ones you have probably seen in excel and SPSS. Here’s a simple example: df &lt;- data.frame(&quot;A&quot;=c(1,2,1,4,3), &quot;B&quot;=c(1.4,2.1,4.6,2.0,8.2), &quot;C&quot;=c(0,0,1,1,1)) df ## A B C ## 1 1 1.4 0 ## 2 2 2.1 0 ## 3 1 4.6 1 ## 4 4 2.0 1 ## 5 3 8.2 1 We can do quite a bit with the data.frame that we called df5. Once again, we could have called this data frame anything, although I recommend short names. If “A” and “C” are factors we can tell R by: df$A &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df$C &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) In the above code, the $ reaches into df to grab a variable (or column). The following code does the exact same thing: df[[&quot;A&quot;]] &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df[[&quot;C&quot;]] &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) and so is the following: df[, &quot;A&quot;] &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df[, &quot;C&quot;] &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) df[[&quot;A&quot;]] grabs the A variable just like df$A. The last example shows that we can grab both columns and rows. In df[, &quot;C&quot;] we have a spot just a head of the comma. It works like this: df[rows, columns]. So we could specifically grab certain rows and certain columns. df[1:3, &quot;A&quot;] df[1:3, 1] Both lines of the above code grabs rows 1 thorugh 3 and column “A”. Finally, we can combine the c() function to grab different rows and columns. To grab rows 1 and 5 and columns “B” and “C” you can do the following: df[c(1,5), c(&quot;B&quot;, &quot;C&quot;)] We may also want to get more information about the data frame before we do any subsetting. There are a few nice functions to get information that can help us know what we should do next with our data. ## Get the variable names names(df) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; ## Know what type of variable it is class(df$A) ## [1] &quot;factor&quot; ## Get quick summary statistics for each variable summary(df) ## A B C ## level1:2 Min. :1.40 Male :2 ## level2:1 1st Qu.:2.00 Female:3 ## level3:1 Median :2.10 ## level4:1 Mean :3.66 ## 3rd Qu.:4.60 ## Max. :8.20 ## Get the first 10 columns of your data head(df, n=10) ## A B C ## 1 level1 1.4 Male ## 2 level2 2.1 Male ## 3 level1 4.6 Female ## 4 level4 2.0 Female ## 5 level3 8.2 Female We admit that the last one is a bit pointless since our data frame is only a few lines long. However, these functions can give you quick information about your data with hardly any effort on your part. Functions Earlier we mentioned that c() was a “function.” Functions are how we do things we our data. There are probably hundreds of thousands of functions at your reach. In fact, you can create your own! We’ll discuss that more later. For now, know that each function has a name (the function name of c() is “c”), arguments, and output of some sort. Arguments are the information that you provide the function (e.g. we gave c() a bunch of numbers). Output from a function varies to a massive degree but, in general, the output is what you are using the function for (e.g., for c() we wanted to create a vector—a variable—of data). At any point, by typing: ?functionname we get information in the “Help” window providing the arguments and output. Below we show you several functions for both importing and saving data. Note that each have a name, arguments, and output. Importing Data Most of the time you’ll want to import data into R rather than manually entering it line by line, variable by variable. There are some built in ways to import many delimited6 data types (e.g. comma delimited–also called a CSV, tab delimited, space delimited). Other packages7 have been developed to help with this as well. The first, if it is an R data file in the form .rda or .RData simply use: load(&quot;file.rda&quot;) Note that you don’t assign this to a name such as df. Instead, it loads whatever R objects were saved to it. Delimited Files Most delimited files are saved as .csv, .txt, or .dat. As long as you know the delimiter, this process is easy. df &lt;- read.table(&quot;file.csv&quot;, sep = &quot;,&quot;, header=TRUE) ## for csv df &lt;- read.table(&quot;file.txt&quot;, sep = &quot;\\t&quot;, header=TRUE) ## for tab delimited df &lt;- read.table(&quot;file.txt&quot;, sep = &quot; &quot;, header=TRUE) ## for space delimited The argument sep tells the function what kind of delimiter the data has and header tells R if the first row contains the variable names (you can change it to FALSE if the first row isn’t). Note that at the end of the lines you see that I left a comment using #. I used two for stylistic purposes but only one is necessary. Anything after a # is not read by the computer; it’s just for us humans. Heads up! Note that unless you are using the load function, you need to assign what is being read in to a name. In the examples, all were called df. In real life, you won’t run a bunch of different read functions to the same name because only the last one run would be saved (the others would be written over). However, if you have multiple data files to import you can assign them to different names and later merge them. Merging, also called joining, is something we’ll discuss in the next chapter. Other Data Formats Data from other statistical software such as SAS, SPSS, or Stata are also easy to get into R. We will use two powerful packages: haven foreign To install, simply run: install.packages(&quot;packagename&quot;) This only needs to be run once on a computer. Then, to use it in a single R session (i.e. from when you open R to when you close it) run: library(packagename) Using these packages, I will show you simple ways to bring your data in from other formats. library(haven) df &lt;- read_dta(&quot;file.dta&quot;) ## for Stata data df &lt;- read_spss(&quot;file.sav&quot;) ## for SPSS data df &lt;- read_sas(&quot;file.sas7bdat&quot;) ## for this type of SAS file library(foreign) df &lt;- read.xport(&quot;file.xpt&quot;) ## for export SAS files If you have another type of data file to import, online helps found on sites like www.stackoverflow.com and www.r-bloggers.com often have the solution. Saving Data Finally, there are many ways to save data. Most of the read... functions have a corresponding write... function. write.table(df, file=&quot;file.csv&quot;, sep = &quot;,&quot;) ## to create a CSV data file R automatically saves missing data as NA since that is what it is in R. But often when we write a CSV file, we might want it as blank or some other value. If that’s the case, we can add another argument na = &quot; &quot; after the sep argument. If you ever have questions about the specific arguments that a certain function has, you can simply run: ?functionname So, if you were curious about the different arguments in write.table simply run: ?write.table. In the pane with the files, plots, packages, etc. a document will show up to give you more informaton. Conclusions R is designed to be flexible and do just about anything with data that you’ll need to do as a researcher. With this chapter under your belt, you can now read basic R code, import and save your data. The next chapter will introduce the “tidyverse” of methods that can help you join, reshape, summarize, group, and much more. R is all about functions. Functions tell R what to do with the data. You’ll see many more examples throughout the book.↩ This is a great feature of R. It is called “object oriented” which basically means R creates objects to work with. I discuss this more in 1.2.↩ I used this name since df is common in online helps and other resources.↩ The delimiter is what separates the pieces of data.↩ A package is an extension to R that gives you more functions–abilities–to work with data. Anyone can write a package, although to get it on the Comprehensive R Archive Network (CRAN) it needs to be vetted to a large degree. In fact, after some practice, you could write a package to help you more easily do your work.↩ "],
["chapter-2-manipulating-your-data.html", "Chapter 2: Manipulating Your Data Tidy Methods Piping Select and Filter Grouping and Summarizing Reshaping Joining (merging)", " Chapter 2: Manipulating Your Data “Organizing is what you do before you do something, so that when you do it, it is not all mixed up.” — A. A. Milne In order to manipulate your data in the cleanest, most up-to-date manner, we are going to be using the “tidyverse” group of methods. The tidyverse8 is a group of packages9 that provide a simple syntax that can do many basic (and complex) data manipulating. The group of packages can be downloaded via: install.packages(&quot;tidyverse&quot;) After downloading it, simply use: library(tidyverse) ## Loading tidyverse: ggplot2 ## Loading tidyverse: tibble ## Loading tidyverse: tidyr ## Loading tidyverse: readr ## Loading tidyverse: purrr ## Loading tidyverse: dplyr ## Conflicts with tidy packages ---------------------------------------------- ## filter(): dplyr, stats ## lag(): dplyr, stats Note that when we loaded tidyverse it loaded 6 packages and told you of “conflicts”. These conflicts are where two or more loaded packages have the same function in them. The last loaded package is the one that R will use by default. For example, if we loaded two packages–awesome and amazing–and both had the function–make_really_great and we loaded awesome and then amazing as so: library(awesome) library(amazing) R will automatically use the function from amazing. We can still access the awesome version of the function (because even though the name is the same, they won’t necessarily do the same things for you). We can do this by: awesome::make_really_great(arg) That’s a bit of an aside, but know that you can always get at a function even if it is “masked” from your current session. Tidy Methods I’m introducing this to you for a couple reasons. It simplifies the code and makes the code more readable. As the saying goes, there are always at least two collaborators on any project: you and future you. It is the cutting edge. The most influential individuals in the R world, including the makers and maintainers of RStudio, use these methods and syntax. The majority of what you’ll need to do with data as a researcher will be covered by these functions. The goal of these functions is to help tidy up your data. Tidy data is based on columns being variables and rows being observations. It is the form that data needs to be in to analyze it, whether that analysis is by graphing, modeling, or other means. There are several methods that help create tidy data: Piping Selecting and Filtering Grouping and Summarizing Reshaping Joining (merging) To help illustrate each aspect, we are going to use real data from the National Health and Nutrition Examiniation Survey (NHANES). I’ve provided this data at https://tysonstanley.github.io/assets/Data/NHANES.zip. I’ve cleaned it up somewhat already. Let’s quickly read that data in so we can use it throughout the remainder of this chapter. First, we will set our working directory with setwd. This tells R where to look for files, including your data files. My specific file location is below so you will need to adjust it to wherever you saved the NHANES data. setwd(&quot;~/Dropbox/GitHub/blog_rstats/assets/Data/&quot;) library(foreign) dem_df &lt;- read.xport(&quot;NHANES_demographics_11.xpt&quot;) med_df &lt;- read.xport(&quot;NHANES_MedHeath_11.xpt&quot;) men_df &lt;- read.xport(&quot;NHANES_MentHealth_11.xpt&quot;) act_df &lt;- read.xport(&quot;NHANES_PhysActivity_11.xpt&quot;) Now we have four separate, but related, data sets in memory: dem_df containing demographic information med_df containing medical health information men_df containing mental health information act_df containing activity level information Since all of them have all-cap variable names, we are going to quickly change this with a little trick: names(dem_df) &lt;- tolower(names(dem_df)) names(med_df) &lt;- tolower(names(med_df)) names(men_df) &lt;- tolower(names(men_df)) names(act_df) &lt;- tolower(names(act_df)) This takes the names of the data frame (on the right hand side), changes them to lower case and then reassigns them to the names of the data frame.10 We will now go through each aspect of the tidy way of working with data using these four data sets. Piping Let’s introduce a few major themes in this tidyverse. First, the pipe operator – %&gt;%. It helps simplify the code and makes things more readable. It takes what is on the left hand side and puts it in the right hand side’s function. dem_df %&gt;% summary So the above code takes the data frame df and puts it into the summary function. This does the same thing as summary(df). In this simple case, it doesn’t really make the code more readable, but in more complex situations it can really help. In the following sections you will see how and where this type of coding is helpful. Select and Filter We often want to subset our data in some way before we do many of our analyses. This can make our cognitive load of the data much lighter but it can also be very important in the actual analyses. The code below show the two main ways to subset your data: 1) selecting variables and 2) filtering observations. To select three variables (i.e. gender [“riagendr”], age [“ridageyr”], and ethnicity [“ridreth1”]) we: selected_dem &lt;- dem_df %&gt;% select(riagendr, ridageyr, ridreth1) Now, selected_dem has three variables and all the observations. We can also filter (i.e. take out observations we don’t want): filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1) Since when riagendr == 1 the individual is male, filtered_dem only has male participants. We can add multiple filtering options as well: filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1 &amp; ridageyr &gt; 16) We now have only males that are older than 16 years old. We used &amp; to say we want both conditions to be met. Alternatively, we could: filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1 | ridageyr &gt; 16) which, using | we are saying we want males or individuals older than 16. In other words, if either are met, that observation will be kept. Finally, we can do all of these in one step: filtered_dem &lt;- dem_df %&gt;% select(riagendr, ridageyr, ridreth1) %&gt;% filter(riagendr == 1 &amp; ridageyr &gt; 16) where we use two %&gt;% operators to grab dem_df, select the three variables, and then filter the rows that we want. Grouping and Summarizing A major aspect of analysis is comparing groups. Lucky for us, this is very simple in R. I call it the three step summary: Data Group by Summarize ## Our Grouping Variable as a factor dem_df$citizen &lt;- factor(dem_df$dmdcitzn) ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n()) ## 3. Summarize ## # A tibble: 4 × 2 ## citizen N ## &lt;fctr&gt; &lt;int&gt; ## 1 1 8685 ## 2 2 1040 ## 3 7 26 ## 4 NA 5 The output is very informative. The first column is the grouping variable and the second is the N (number of individuals) by group. We can quickly see that there are four levels, currently, to the citizen variable. After some reading of the documentation we see that 1 = Citizen and 2 = Not a Citizen. A value of 7 it turns out is a placeholder value for missing. And finally we have an NA category. It’s unlikely that we want those to be included in any analyses, unless we are particularly interested in the missingness on this variable. So let’s do some simple cleaning to get this where we want it. To do this, we will use the furniture package. install.packages(&quot;furniture&quot;) library(furniture) dem_df$citizen &lt;- washer(dem_df$citizen, 7) ## Changes all 7&#39;s to NA&#39;s dem_df$citizen &lt;- washer(dem_df$citizen, 2, value=0) ## Changes all 2&#39;s to 0&#39;s Now, our citizen variable is cleaned, with 0 meaning not a citizen and 1 meaning citizen. Let’s rerun the code from above with the three step summary: ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n()) ## 3. Summarize ## # A tibble: 3 × 2 ## citizen N ## &lt;chr&gt; &lt;int&gt; ## 1 0 1040 ## 2 1 8685 ## 3 &lt;NA&gt; 31 Its clear that the majority of the subjects are citizens. We can also check multiple variables at the same time, just separating them with a comma in the summarize function. ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n(), ## 3. Summarize Age = mean(ridageyr, na.rm=TRUE)) ## # A tibble: 3 × 3 ## citizen N Age ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 0 1040 37.31635 ## 2 1 8685 30.66252 ## 3 &lt;NA&gt; 31 40.35484 We used the n() function (which gives us counts) and the mean() function which, shockingly, gives us the mean. Note that if there are NA’s in the variable, the mean (and most other functions like it) will give the result NA. To have R ignore these, we tell the mean function to remove the NA’s when you compute this using na.rm=TRUE. This pattern of grouping and summarizing is something that will follow us throughout the book. It’s a great way to get to know your data well and to make decisions on what to do next with your data. Reshaping This is a big part of working with data. Unfortunately, it is also a difficult topic to understand without much practice at it. In general, two data formats exist: Wide form Long form Only when the data is cross-sectional and each individual is a row does this distinction not matter much. Otherwise, if there are multiple measures per individual, or there are multiple individuals per cluster, the distinction between wide and long is very important for modeling and visualization. Wide Form Wide form generally has one unit (i.e. individual) per row. This generally looks like: ## ID Var_Time1 Var_Time2 ## 1 1 -0.82420440 0.31544451 ## 2 2 -0.66666680 0.11434808 ## 3 3 -0.22353820 0.36795942 ## 4 4 0.32431991 0.20922510 ## 5 5 0.04575228 0.55781471 ## 6 6 0.18952201 0.24274077 ## 7 7 -0.56035190 0.14321445 ## 8 8 1.62993250 0.30872494 ## 9 9 0.86552513 0.25050663 ## 10 10 -1.26809297 0.08066232 Notice that each row has a unique ID. This format is common in the ANOVA family of analyses. These can be used when there are set time points that the individual is measured and each individual has the same number of time points. This is not always reasonable, but when it is, wide format works just fine. However, when these conditions don’t hold, mixed effects modeling (i.e. multilevel modeling, hierarchical linear modeling) is particularly useful. In order to do mixed effects modeling, long format is required. Long Form In contrast, long format has the lowest nested unit as a single row. This means that a single ID can span multiple rows, usually with a unique time point for each row as so: ## ID Time Var ## 1 1 1 0.9329639 ## 2 1 2 0.1715240 ## 3 1 3 0.2221021 ## 4 1 4 0.4604060 ## 5 2 1 0.5427855 ## 6 2 2 0.9300754 ## 7 3 1 0.9958878 ## 8 3 2 0.2083723 ## 9 3 3 0.1070417 Notice that a single ID spans multiple columns and that each row has only one time point. Here, time is nested within individuals making it the lowest unit. Therefore, each row corresponds to a single time point. Generally, this is the format we want for most modeling techniques and most visualizations. Joining (merging) The final topic in the chapter is joining data sets This is common when we are using bigger We currently have 4 data sets that have mostly the same people in them but with different variables. One tells us about the demographics; another gives us information on mental health. We may have questions that ask whether a demographic characteristics is related to a mental health factor. This means we need to merge, or join, our data sets.11 When we merge a data set, we combine them based on some ID variable(s). Here, this is simple since each individual is given a unique identifier in the variable seqn. Within the dplyr package there are four main joining functions: inner_join, left_join, right_join and full_join. Each join combines the data in slightly different ways. Let’s first load dplyr: library(dplyr) Inner Join Here, only those individuals that are in both data sets that you are combining will remain. So if person “A” is in data set 1 and not in data set 2 then he/she will not be included. inner_join(df1, df2, by=&quot;IDvariable&quot;) Left or Right Join This is similar to inner join but now if the individual is in data set 1 then left_join will keep them even if they aren’t in data set 2. right_join means if they are in data set 2 then they will be kept whether or not they are in data set 1. left_join(df1, df2, by=&quot;IDvariable&quot;) ## keeps all in df1 right_join(df1, df2, by=&quot;IDvariable&quot;) ## keeps all in df2 Full Join This one simply keeps all individuals that are in either data set 1 or data set 2. full_join(df1, df2, by=&quot;IDvariable&quot;) Each of the left, right and full joins will have missing values placed in the variables where that individual wasn’t found. For example, if person “A” was not in df2, then in a full join they would have missing values in the df1 variables. For our NHANES example, we will use full_join to get all the data sets together. Note that in the code below we do all the joining in the same overall step. df &lt;- dem_df %&gt;% full_join(med_df, by=&quot;seqn&quot;) %&gt;% full_join(men_df, by=&quot;seqn&quot;) %&gt;% full_join(act_df, by=&quot;seqn&quot;) So now df is the the joined data set of all four. We started with dem_df joined it with med_df by seqn then joined that joined data set with men_df by seqn, and so on. For analyses in the next chapter, we will use this new df object that is the combination of all the data sets that we had before. Hadley Wickham (2016). tidyverse: Easily Install and Load ‘Tidyverse’ Packages. R package version 1.0.0. https://CRAN.R-project.org/package=tidyverse↩ Remember, a package is an extension to R that gives you more functions that you can easily load into R.↩ Note that these are not particularly helpful names, but they are the names provided in the original data source. If you have questions about the data, visit http://wwwn.cdc.gov/Nchs/Nhanes/Search/Nhanes11_12.aspx.↩ Note that this is different than adding new rows but not new variables. Merging requires that we have at least some overlap of individuals in both data sets.↩ "],
["chapter-3-understanding-and-describing-your-data.html", "Chapter 3: Understanding and Describing Your Data Descriptive Statistics Visualizations", " Chapter 3: Understanding and Describing Your Data “If you can’t explain it simply, you don’t understand it well enough.” — Albert Einstein We are going to take what we’ve learned from the previous two chapters and use them together to have simple but powerful ways to understand your data. This chapter will be broken down into: Descriptive Statistics Visualizations The two go hand-in-hand in understanding what is happening in your data. We are often most interested in three things when exploring our data: understanding distributions, understanding relationships, and looking for outliers or errors. Descriptive Statistics Several methods of discovering descriptives in a succinct way have been developed for R. My favorite (full disclosure: it is one that I made so I may be biased) is the table1 function in the furniture package. This function has been designed to be simple and complete. It produces a well-formatted table that you can easily export and use as a table in a report or article.12 We’ll first create a ficticious data set and we’ll show the basic build of table1. library(furniture) df &lt;- data.frame(&quot;A&quot;=c(1,2,1,4,3,NA), &quot;B&quot;=c(1.4,2.1,4.6,2.0,NA,3.4), &quot;C&quot;=c(0,0,1,1,1,1), &quot;D&quot;=rnorm(6)) table1(df, A, B, C, D) ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## 2.20 (1.30) ## B ## 2.70 (1.29) ## C ## 0.67 (0.52) ## D ## 0.14 (1.23) ## |==============================| This quickly gives you means and standard deviations (or counts and percentages if there were categorical variables). We could have also used the pipe operator here if we wanted via: df %&gt;% table1(A, B, C, D) ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## 2.20 (1.30) ## B ## 2.70 (1.29) ## C ## 0.67 (0.52) ## D ## 0.14 (1.23) ## |==============================| It turns out, for we want “A” and “C” to be factors. df$A &lt;- factor(df$A, labels=c(&quot;cat1&quot;, &quot;cat2&quot;, &quot;cat3&quot;, &quot;cat4&quot;)) df$C &lt;- factor(df$C, labels=c(&quot;male&quot;, &quot;female&quot;)) table1(df, A, B, C, D) ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## cat1 2 (40%) ## cat2 1 (20%) ## cat3 1 (20%) ## cat4 1 (20%) ## B ## 2.70 (1.29) ## C ## male 2 (33.3%) ## female 4 (66.7%) ## D ## 0.14 (1.23) ## |==============================| So now we see the counts and percentages for the factor variables. But now we can take a step further and look for relationships. The code below shows the means/standard devaitions or counts/percentages by a grouping variable–in this case, C. table1(df, A, B, D, splitby = ~C) ## ## |====================================| ## male female ## Observations 2 4 ## A ## cat1 1 (50%) 1 (33.3%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (33.3%) ## cat4 0 (0%) 1 (33.3%) ## B ## 1.75 (0.49) 3.33 (1.30) ## D ## 0.11 (0.44) 0.16 (1.56) ## |====================================| We can also test for differences by group as well (although this is not particularly good with a sample size of 5). It produces a warning since the \\(\\chi^2\\) approximation is not accurate with cells this small. table1(df, A, B, D, splitby = ~C, test=TRUE) ## ## |============================================| ## male female P-Value ## Observations 2 4 ## A 0.405 ## cat1 1 (50%) 1 (33.3%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (33.3%) ## cat4 0 (0%) 1 (33.3%) ## B 0.162 ## 1.75 (0.49) 3.33 (1.30) ## D 0.96 ## 0.11 (0.44) 0.16 (1.56) ## |============================================| Finally, we can include missingness in the table for factors. table1(df, A, B, D, splitby = ~C, test=TRUE, NAkeep = TRUE) ## ## |============================================| ## male female P-Value ## Observations 2 4 ## A 0.405 ## cat1 1 (50%) 1 (25%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (25%) ## cat4 0 (0%) 1 (25%) ## NA 0 (0%) 1 (25%) ## B 0.162 ## 1.75 (0.49) 3.33 (1.30) ## D 0.96 ## 0.11 (0.44) 0.16 (1.56) ## |============================================| So with three or four short lines of code we can get a good idea about variables that may be related to the grouping variable and any missingness in the factor variables. There’s much more you can do with table1 and there are vignettes and tutorials available to learn more.13 Other quick descriptive functions exist; here are a few of them. summary(df) ## descriptives for each variable in the data library(psych) ## install first describe(df) ## produces summary statistics for continuous variables library(Hmisc) ## install first Hmisc::describe(df) ## gives summary for each variable separately Visualizations Understanding your data, in my experience, generally requires visualizations. If we are going to use a model of some sort, understanding the distributions and relationships beforehand are very helpful in interpreting the model and catching errors in the data. Also finding any outliers or errors that could be highly influencing the modeling should be understood beforehand. For simple but appealing visualizations we are going to be using ggplot2. This package is used to produce professional level plots for many journalism organizations (e.g. five-thrity-eight). These plots are quickly presentation quality and can be used to impress your boss, your advisor, or your friends. 0.0.1 Using ggplot2 This package has a straight-forward syntax. It is built by adding layers to the plot. library(ggplot2) ## first install using install.packages(&quot;ggplot2&quot;) First, we have a nice qplot function that is short for “quick plot.” It quickly decides what kind of plot is useful given the data and variables you provide. qplot(df$A) ## Makes a simple histogram qplot(df$D, df$B) ## Makes a scatterplot ## Warning: Removed 1 rows containing missing values (geom_point). For a bit more control over the plot, you can use the ggplot function. The first piece is the ggplot piece. From there, we add layers. These layers generally start with geom_ then have the type of plot. Below, we start with telling ggplot the basics of the plot and then build a boxplot. The x-axis is the variable “C” and the y-axis is the variable “D” and then we color it by variable “C” as well. ggplot(df, aes(x=C, y=D)) + geom_boxplot(aes(color = C)) Here’s a few more examples: ggplot(df, aes(x=C)) + geom_bar(stat=&quot;count&quot;, aes(fill = C)) ggplot(df, aes(x=B, y=D)) + geom_point(aes(color = C)) ## Warning: Removed 1 rows containing missing values (geom_point). Note that the warning that says it removed a row is because we had a missing value in “C”. We are going to make the first one again but with some aesthetic adjustments. Notice that we just added two extra lines telling ggplot2 how we want some things to look.14 ggplot(df, aes(x=C, y=D)) + geom_boxplot(aes(color = C)) + theme_bw() + scale_color_manual(values = c(&quot;dodgerblue4&quot;, &quot;coral2&quot;)) The theme_bw() makes the background white, the scale_color_manual() allows us to change the colors in the plot. You can get a good idea of how many types of plots you can do by going to http://docs.ggplot2.org/current. Almost any informative plot that you need to do as a researcher is possible with ggplot2. We will be using ggplot2 extensively in the book to help understand our data and our models as well as communicate our results. The following code is used for this chapter, chapters 5 - 7 and 9 to prep the data for the subsequent analyses. It is called “table1” because a nice descriptive table is often found in the first table of many academic papers.↩ tysonstanley.github.io↩ This is just scratching the surface of what we can change in the plots.↩ "],
["chapter-4-basic-analyses.html", "Chapter 4: Basic Analyses ANOVA Linear Modeling When Assumptions Fail Interactions", " Chapter 4: Basic Analyses “The goal is to turn data into information, and information into insight.” — Carly Fiorina In this chapter we are going to demonstrate basic modeling in R. Lucky for us, R is built for these analyses. It is actually quite straight-forward to run these types of models and analyze the output. Not only that, but there are simple ways to compare models. We will go through the ANOVA family of analyses, the linear regression models, and look at diagnostics of each. ANOVA ANOVA stands for analysis of variance. It is a family of methods (e.g. ANCOVA, MANOVA) that all share the fact that they compare a continuous dependent variable by a grouping factor variable (and may have multiple outcomes or other covariates). \\[ Y_i = \\alpha_0 + \\alpha_1 \\text{Group}_i + e_i \\] Since the groups are compared using “effect coding,” the \\(\\alpha_0\\) is the grand mean and each of the group level means are compared to it. To run an ANOVA model, you can simply use the aov function. In the example below, we are analyzing whether family size (although not fully continuous it is still useful for the example) differs by race. df$race &lt;- factor(df$ridreth1, labels=c(&quot;MexicanAmerican&quot;, &quot;OtherHispanic&quot;, &quot;White&quot;, &quot;Black&quot;, &quot;Other&quot;)) df$famsize &lt;- as.numeric(df$dmdfmsiz) fit &lt;- aov(famsize ~ race, df) anova(fit) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 541.2 135.300 51.367 &lt; 2.2e-16 *** ## Residuals 4627 12187.5 2.634 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We make sure the variables are the right type, then we use the aov function. Inside of the function we have what is called a formula. It has the general structure: leftside ~ rightside. Generally, the left side is an outcome variable and the right side is the predictor (i.e. independent) variable. Here, we have race predicting famsize. We assign the model to the name fit which is a common way of denoting it is a model. Finally, we use the anova function to output a nice ANOVA table. In the output we see the normal ANOVA table and we can see the p-value (Pr(&gt;F)) is very, very small and thus is quite significant. We can look at how the groups relate using a box plot. We will be using some of the practice you got in Chapter 3 using ggplot2 for this. library(ggplot2) ggplot(df, aes(x=race, y=famsize)) + geom_boxplot(aes(color=race)) + scale_color_manual(guide=FALSE, values=c(&quot;dodgerblue3&quot;, &quot;coral2&quot;, &quot;chartreuse4&quot;, &quot;darkorchid&quot;, &quot;firebrick2&quot;)) + theme_bw() This immediately gives us an idea of where some differences may be occuring. It would appear that “White” and “MexicanAmerican” groups are different in family size. Assumptions We also would like to make sure the assumptions look like they are being met. In ANOVA, we want the residuals to be distributed normally, the variance of each group should be approximately the same, the groups are assumed to be randomly assigned, and the sample should be randomly selected as well. In R we can get some simple graphical checks using plot. All we provide is our ANOVA object (here it is fit). The line before it par(mfrow=c(1,2)) tells R to have two plots per row (the 1 means one row, 2 means two columns). par(mfrow=c(1,2)) plot(fit) Here, it looks like we have a problem with normality (see the Normal Q-Q plot). Those dots should approximately follow the dotted line, which is not the case. In the first plot (Residuals vs. Fitted) suggests we have approximate homoskedasticity. Linear Modeling Linear regression is nearly identical to ANOVA. In fact, a linear regression with a continuous outcome and categorical predictor is exactly the same (if we use effect coding). For example, if we run the same model but with the linear regression function lm we get the same ANOVA table. fit2 &lt;- lm(famsize ~ race, data=df) anova(fit2) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 541.2 135.300 51.367 &lt; 2.2e-16 *** ## Residuals 4627 12187.5 2.634 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Surprise! It is the same as before. Here we can also use the summary function and we get the coefficients in the model as well (using dummy coding). The first level of the categorical variable is the reference group (the group that the others are compared to). We also get the intercept (in this case, the average value of the reference group). summary(fit2) ## ## Call: ## lm(formula = famsize ~ race, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.6193 -1.4932 -0.4932 0.9539 4.5068 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.61927 0.07773 46.565 &lt; 2e-16 *** ## raceOtherHispanic -0.51841 0.10814 -4.794 1.69e-06 *** ## raceWhite -1.12604 0.08676 -12.978 &lt; 2e-16 *** ## raceBlack -0.79795 0.09056 -8.812 &lt; 2e-16 *** ## raceOther -0.57320 0.09803 -5.847 5.35e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.623 on 4627 degrees of freedom ## Multiple R-squared: 0.04252, Adjusted R-squared: 0.04169 ## F-statistic: 51.37 on 4 and 4627 DF, p-value: &lt; 2.2e-16 Assumptions Linear regression has a few important assumptions, often called “Gauss-Markov Assumptions”. These include: The model is linear in parameters. Homoskedasticity (i.e. the variance of the residual is roughly uniform across the values of the independents). Normality of residuals. Numbers 2 and 3 are fairly easy to assess using the plot() function on the model object as we did with the ANOVA model. The linear in parameters suggests that the relationship between the outcome and independents is linear. par(mfrow=c(1,2)) plot(fit2) Comparing Models Often when running linear regression, we want to compare models and see if one fits significantly better than another. We also often want to present all the models in a table to let our readers compare the models. We will demonstrate both. Compare Statistically Using the anova() function, we can compare models statistically. anova(fit, fit2) ## Analysis of Variance Table ## ## Model 1: famsize ~ race ## Model 2: famsize ~ race ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 4627 12188 ## 2 4627 12188 0 0 The anova() function works with all sorts of modeling schemes and can help in model selection. Not surprisingly, when we compared the ANOVA and the simple linear model, they are exactly the same in overall model terms (the only difference is in how the cateogrical variable is coded—either effect coding in ANOVA or dummy coding in regression). For a more interesting comparison, lets run a new model with an additional variable and then make a comparison. fit3 = lm(famsize ~ race + marriage, data=df) summary(fit3) ## ## Call: ## lm(formula = famsize ~ race + marriage, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.9689 -1.1774 -0.4101 1.0311 5.2870 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.96893 0.07790 50.952 &lt; 2e-16 *** ## raceOtherHispanic -0.41181 0.10368 -3.972 7.23e-05 *** ## raceWhite -1.02681 0.08364 -12.277 &lt; 2e-16 *** ## raceBlack -0.55881 0.08791 -6.357 2.26e-10 *** ## raceOther -0.56242 0.09461 -5.945 2.97e-09 *** ## marriage2 -1.22909 0.08666 -14.183 &lt; 2e-16 *** ## marriage3 -1.20245 0.07784 -15.447 &lt; 2e-16 *** ## marriage4 -0.47750 0.12529 -3.811 0.00014 *** ## marriage5 -0.80932 0.05970 -13.556 &lt; 2e-16 *** ## marriage6 -0.49213 0.08866 -5.551 3.00e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.552 on 4622 degrees of freedom ## Multiple R-squared: 0.1255, Adjusted R-squared: 0.1238 ## F-statistic: 73.73 on 9 and 4622 DF, p-value: &lt; 2.2e-16 Notice that the variable is associated with the outcome according to the t-test seen in the summary. So we would expect that fit3 is better than fit2 at explaining the outcome, which we see in the output below. anova(fit2, fit3) ## Analysis of Variance Table ## ## Model 1: famsize ~ race ## Model 2: famsize ~ race + marriage ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 4627 12188 ## 2 4622 11131 5 1056.8 87.765 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Compare in a Table We can also compare the models in a well-formatted table that makes many aspects easy to compare. Two main packages allow us to compare models: stargazer texreg Both provide simple functions to compare multiple models. For example, stargazer provides: library(stargazer) ## ## Please cite as: ## Hlavac, Marek (2015). stargazer: Well-Formatted Regression and Summary Statistics Tables. ## R package version 5.2. http://CRAN.R-project.org/package=stargazer stargazer(fit2, fit3, type = &quot;text&quot;) ## ## ===================================================================== ## Dependent variable: ## ------------------------------------------------- ## famsize ## (1) (2) ## --------------------------------------------------------------------- ## raceOtherHispanic -0.518*** -0.412*** ## (0.108) (0.104) ## ## raceWhite -1.126*** -1.027*** ## (0.087) (0.084) ## ## raceBlack -0.798*** -0.559*** ## (0.091) (0.088) ## ## raceOther -0.573*** -0.562*** ## (0.098) (0.095) ## ## marriage2 -1.229*** ## (0.087) ## ## marriage3 -1.202*** ## (0.078) ## ## marriage4 -0.477*** ## (0.125) ## ## marriage5 -0.809*** ## (0.060) ## ## marriage6 -0.492*** ## (0.089) ## ## Constant 3.619*** 3.969*** ## (0.078) (0.078) ## ## --------------------------------------------------------------------- ## Observations 4,632 4,632 ## R2 0.043 0.126 ## Adjusted R2 0.042 0.124 ## Residual Std. Error 1.623 (df = 4627) 1.552 (df = 4622) ## F Statistic 51.367*** (df = 4; 4627) 73.729*** (df = 9; 4622) ## ===================================================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 When Assumptions Fail There are many things we can try when our assumptions fail. In my opinion, the best and most interpretable way is to use a Generalized Linear Model (GLM) which is discussed in the next chapter. There are a few other things you can try which I’ll show here. But, keep in mind that these things can cause other problems. For example, to fix normality we may accidentally cause heteroskedasticity. With that in mind, here are some common methods to help a model fit better. Log-Linear, Log-Log, Linear-Log, Other Sounds like a great tongue-twister? Well, it is but it’s also three ways of specifying (i.e. deciding what is in) your model better. Log-Linear is where we adjust the outcome variable by a natural log transformation. This is done easily in R: df$log_outcome &lt;- log(df$outcome) lm(log_outcome ~ var1, data=df) Log-Log is where we adjust both the outcome and the predictor variable with a log transformation. This is also easily done: df$log_outcome &lt;- log(df$outcome) df$log_var1 &lt;- log(df$var1) lm(log_outcome ~ log_var1, data=df) Linear-Log is where we adjsut just the predictor variable with a log transformation. And, you guessed it, this is easily done in R: df$log_var1 &lt;- log(df$var1) lm(outcome ~ log_var1 + var2, data=df) Other methods such as square rooting the outcome or using some power function (e.g. square, cube) are also quite common. There are functions that look for the best transformation to use. However, I will not cover it here since I think GLM’s are better. So if you want to learn about other ways to help your linear model go to the next chapter. Interactions Many times hypotheses dealing with human beings include interactions between effects. Interactions are when the effect of one variable depends on another variable. For example, the effect of marital status on family size may depend on whether the individual is a minority. In fact, this is the hypothesis we’ll test below. Including interactions in ANOVA and regression type models are very simple in R. Since interpretations of interaction effects are often best through plots, we will also show simple methods to visualize the interactions as well. Interactions in ANOVA In general, we refer to ANOVA’s with interactions as “2-way Factorial ANOVA’s”. We interact race and marriage status in this ANOVA. For simplicity, we created a binary race variable called minority using the ifelse() function. We explain this in more depth in Chapter 5. df$minority &lt;- factor(ifelse(df$race == &quot;White&quot;, 0, 1), labels = c(&quot;White&quot;, &quot;Minority&quot;)) fit_anova &lt;- aov(famsize ~ minority*marriage, df) anova(fit_anova) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## minority 1 334.9 334.92 137.9637 &lt; 2e-16 *** ## marriage 5 1153.3 230.65 95.0112 &lt; 2e-16 *** ## minority:marriage 5 24.9 4.98 2.0527 0.06831 . ## Residuals 4620 11215.6 2.43 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Notice two things: First, the interaction is significant (p = .003). This is important since we are going to try to interpret this interaction. Second, by including minority*marriage we get both the main effects and the interaction. This is very important for interpretation purposes so you can thank R for making it a bit more easy on you. We can check the assumptions the same way as before: par(mfrow=c(1,2)) plot(fit_anova) Again, the assumptions are not met for this model. But, if we ignore that for now, we can quickly find a way to interpret the interaction. We first create a new data set that is composed of every possible combination of the variables in the model. This allows us to get unbiased estimates for the plotting. newdata &lt;- expand.grid(minority = levels(df$minority), marriage = levels(df$marriage)) newdata$preds &lt;- predict(fit_anova, newdata=newdata) We now use ggplot2 just as before. ggplot(newdata, aes(x = marriage, y = preds, group = minority)) + geom_line(aes(color = minority)) + geom_point(aes(color = minority)) + labs(y = &quot;Predicted Family Size&quot;, x = &quot;Marital Status&quot;) + scale_color_manual(name = &quot;&quot;, values = c(&quot;dodgerblue3&quot;, &quot;chartreuse3&quot;)) + theme_anteo_wh() ## from anteo package The plot tells use a handful of things. For example, we see minorities generally have more children across marital statuses. However, the difference is smaller for married and divorced individuals compared to widowed, separated, never married, and living with a partner. There’s certainly more to gleen from the plot, but we won’t waste your time. Interactions in Linear Regression Interactions in linear regression is nearly identical as in ANOVA, except we use dummy coding. It provides a bit more information. For example, we get the coefficients from the linear regression whereas the ANOVA does not provide this. We can run a regression model via: fit_reg &lt;- lm(famsize ~ minority*marriage, df) summary(fit_reg) ## ## Call: ## lm(formula = famsize ~ minority * marriage, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.4794 -1.1957 -0.4794 0.9805 5.4353 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.01952 0.05131 58.846 &lt; 2e-16 *** ## minorityMinority 0.45989 0.06723 6.841 8.89e-12 *** ## marriage2 -1.45482 0.13005 -11.187 &lt; 2e-16 *** ## marriage3 -1.24374 0.11627 -10.697 &lt; 2e-16 *** ## marriage4 -0.51952 0.28906 -1.797 0.0724 . ## marriage5 -1.01614 0.10409 -9.762 &lt; 2e-16 *** ## marriage6 -0.69891 0.14548 -4.804 1.60e-06 *** ## minorityMinority:marriage2 0.35455 0.17408 2.037 0.0417 * ## minorityMinority:marriage3 0.02632 0.15609 0.169 0.8661 ## minorityMinority:marriage4 0.09808 0.32098 0.306 0.7599 ## minorityMinority:marriage5 0.25181 0.12680 1.986 0.0471 * ## minorityMinority:marriage6 0.41515 0.18332 2.265 0.0236 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.558 on 4620 degrees of freedom ## Multiple R-squared: 0.1189, Adjusted R-squared: 0.1168 ## F-statistic: 56.66 on 11 and 4620 DF, p-value: &lt; 2.2e-16 We used summary() to see the coefficients. If we used anova() it would have been the same as the one for the ANOVA. We can use the exact same methods here as we did with the ANOVA, including checking assumptions, creating a new data set, and using ggplot2 to check the interaction. We won’t repeat it here so you can move on to Chapter 5. "],
["chapter-5-generalized-linear-models.html", "Chapter 5: Generalized Linear Models Logistic Regression Poisson Regression Beta Regression Conclusions", " Chapter 5: Generalized Linear Models “You must stick to your conviction, but be ready to abandon your assumptions.” — Dennis Waitley Generalized Linear Models (GLM’s) are extensions of linear regression to areas where assumptions of normality and homoskedasticity do not hold. There are several versions of GLM’s, each for different types and distributions of outcomes. We are going to go through several of the most common. This chapter is to introduce the method very briefly and demonstrate how to perform one in R. We do not delve into the details of each method much, but rather focus on showing the quirks of the coding. We discuss: Logistic Regression Poisson Regression GLM with Gamma distribution Negative binomial Beta Regression Logistic Regression For binary outcomes (e.g., yes or no, correct or incorrect, sick or healthy), logistic regression is a fantastic tool that provides useful and interpretable information. Much like simple and multiple linear regression, logistic regression15 uses dummy coding and provides coefficients that tell us the relationship between the outcome and the independent variables. Since the outcome is binary, we use a statistical transformation to make things work well. This makes it so the outcome is in “log-odds.” A simple exponentiation of the coefficients and we get very useful “odds ratios.” These are very common in many fields using binary data. Luckily, running a logistic regression is simple in R. We first create the binary outcome variable called dep. We use a new function called mutate to create a new variable (we could do this a number of ways but this is probably the cleanest way). ## First creating binary depression variable df &lt;- df %&gt;% mutate(dep = dpq010 + dpq020 + dpq030 + dpq040 + dpq050 + dpq060 + dpq070 + dpq080 + dpq090) %&gt;% mutate(dep2 = ifelse(dep &gt;= 10, 1, ifelse(dep &lt; 10, 0, NA))) Note that we added the values from the ten variables that give us an overall depression score (dep). We then use ifelse() to create a binary version of depression called dep2 with a cutoff of \\(\\geq 16\\) meaning depressed. Because there are missing values denoted as “NA” in this variable, we use a “nested ifelse” to say: IF depression \\(\\geq 10\\) then dep2 is 1, IF dpression \\(&lt; 10\\), then dep2 is 0, ELSE dep2 is NA. Note that these nested ifelse() statements can be as long as you want. We further need to clean up the asthma and sedentary variables. ## Fix some placeholders df &lt;- df %&gt;% mutate(asthma = washer(mcq010, 9), asthma = washer(asthma, 2, value = 0)) %&gt;% mutate(sed = washer(pad680, 9999, 7777)) Now let’s run the logistic regression: l_fit &lt;- glm(dep2 ~ asthma + sed + race + famsize, data = df, family = &quot;binomial&quot;) summary(l_fit) ## ## Call: ## glm(formula = dep2 ~ asthma + sed + race + famsize, family = &quot;binomial&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.7831 -0.4479 -0.4078 -0.3645 2.5471 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -2.6203555 0.2380770 -11.006 &lt; 2e-16 *** ## asthma 0.5688452 0.1276326 4.457 8.32e-06 *** ## sed 0.0005638 0.0002610 2.160 0.0307 * ## raceOtherHispanic 0.7162568 0.2328673 3.076 0.0021 ** ## raceWhite 0.1287059 0.2116414 0.608 0.5431 ## raceBlack 0.0189205 0.2205461 0.086 0.9316 ## raceOther -0.4901414 0.2570123 -1.907 0.0565 . ## famsize -0.0318309 0.0373218 -0.853 0.3937 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2706.3 on 4436 degrees of freedom ## Residual deviance: 2648.2 on 4429 degrees of freedom ## (195 observations deleted due to missingness) ## AIC: 2664.2 ## ## Number of Fisher Scoring iterations: 5 We used glm() (stands for generalized linear model). The key to making it logistic, since you can use glm() for a linear model using maximum likelihood instead of lm() with least squares, is family = &quot;binomial&quot;. This tells R to do a logistic regression. Poisson Regression As we did in logistic regression, we will use the glm() function. The difference here is we will be using an outcome that is a count variable. For example, the sedentary variable (sed) that we have in df is a count of the minutes of sedentary activity. p_fit &lt;- glm(sed ~ asthma + race + famsize, data = df, family = &quot;poisson&quot;) summary(p_fit) ## ## Call: ## glm(formula = sed ~ asthma + race + famsize, family = &quot;poisson&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -27.362 -8.430 -1.477 5.823 34.507 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.6499871 0.0035550 1589.31 &lt;2e-16 *** ## asthma 0.0614965 0.0021434 28.69 &lt;2e-16 *** ## raceOtherHispanic 0.1393438 0.0040940 34.04 &lt;2e-16 *** ## raceWhite 0.3484622 0.0033438 104.21 &lt;2e-16 *** ## raceBlack 0.3400346 0.0034430 98.76 &lt;2e-16 *** ## raceOther 0.3557953 0.0036273 98.09 &lt;2e-16 *** ## famsize -0.0188673 0.0005488 -34.38 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 496351 on 4436 degrees of freedom ## Residual deviance: 475428 on 4430 degrees of freedom ## (195 observations deleted due to missingness) ## AIC: 508999 ## ## Number of Fisher Scoring iterations: 5 Sedentary may be over-dispersed (see plot) and so other methods related to poisson may be necessary. For this book, we are not going to be delving into these in depth but we will introduce some below. Gamma Regression with a gamma distribution are often found when analyzing costs in dollars. It is very similar to poisson but does not require integers and can handle more dispersion. However, the outcome must have values \\(&gt; 0\\). Just for demonstration: ## Adjust sed df$sed_gamma &lt;- df$sed + .01 g_fit &lt;- glm(sed_gamma ~ asthma + race + famsize, data = df, family = &quot;Gamma&quot;) summary(g_fit) ## ## Call: ## glm(formula = sed_gamma ~ asthma + race + famsize, family = &quot;Gamma&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -4.3589 -0.4613 -0.0845 0.2926 1.6868 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.567e-03 1.132e-04 31.515 &lt; 2e-16 *** ## asthma -1.604e-04 5.865e-05 -2.735 0.00626 ** ## raceOtherHispanic -4.874e-04 1.309e-04 -3.723 0.00020 *** ## raceWhite -1.090e-03 1.078e-04 -10.115 &lt; 2e-16 *** ## raceBlack -1.068e-03 1.102e-04 -9.697 &lt; 2e-16 *** ## raceOther -1.110e-03 1.145e-04 -9.695 &lt; 2e-16 *** ## famsize 5.107e-05 1.552e-05 3.289 0.00101 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Gamma family taken to be 0.2932604) ## ## Null deviance: 1664.8 on 4436 degrees of freedom ## Residual deviance: 1604.2 on 4430 degrees of freedom ## (195 observations deleted due to missingness) ## AIC: 59154 ## ## Number of Fisher Scoring iterations: 5 Two-Part or Hurdle Models We are going to use the pscl package to run a hurdle model. These models are built for situations where there is a count variable with many zeros (“zero-inflated”). The hurdle model makes slightly different assumptions regarding the zeros than the pure negative binomial that we present next. The hurdle consists of two models: one for whether the person had a zero or more (binomial) and if more than zero, how many (poisson). To run a hurdle model, we are going to make a sedentary variable with many more zeros to illustrate and then we will run a hurdle model. ## Zero inflated sedentary (don&#39;t worry too much about the specifics) df$sed_zero &lt;- ifelse(sample(1:100, size = length(df$sed), replace=TRUE) %in% c(5,10,11,20:25), 0, df$sed) ## Hurdle model library(pscl) h_fit = hurdle(sed_zero ~ asthma + race + famsize, data = df) summary(h_fit) ## ## Call: ## hurdle(formula = sed_zero ~ asthma + race + famsize, data = df) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -3.6602 -1.5717 -0.1734 1.2902 10.4890 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.6374881 0.0037065 1520.99 &lt;2e-16 *** ## asthma 0.0506724 0.0022524 22.50 &lt;2e-16 *** ## raceOtherHispanic 0.1459886 0.0042669 34.21 &lt;2e-16 *** ## raceWhite 0.3593673 0.0034948 102.83 &lt;2e-16 *** ## raceBlack 0.3520281 0.0035970 97.87 &lt;2e-16 *** ## raceOther 0.3715936 0.0037871 98.12 &lt;2e-16 *** ## famsize -0.0173586 0.0005701 -30.45 &lt;2e-16 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.42430 0.22659 10.699 &lt;2e-16 *** ## asthma -0.07526 0.14909 -0.505 0.614 ## raceOtherHispanic 0.10495 0.26647 0.394 0.694 ## raceWhite -0.12504 0.21069 -0.593 0.553 ## raceBlack -0.08696 0.21891 -0.397 0.691 ## raceOther -0.10106 0.23345 -0.433 0.665 ## famsize 0.02304 0.03810 0.605 0.545 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 12 ## Log-likelihood: -2.34e+05 on 14 Df Notice that the output has two parts: “Count model coefficients (truncated poisson with log link):” and “Zero hurdle model coefficients (binomial with logit link):”. Together they tell us about the relationship between the predictors and a count variable with many zeros. Negative Binomial Similar to that above, negative binomial is for zero-inflated count variables. It makes slightly different assumptions than the hurdle and doesn’t use a two-part approach. In order to run a negative binomial model we’ll use the MASS package and the glm.nb() function. library(MASS) fit_nb &lt;- glm.nb(sed_zero ~ asthma + race + famsize, data = df) summary(fit_nb) Note that this model is not really appropriate because our data is somewhat contrived. Beta Regression For outcomes that are bound between a lower and upper bound, Beta Regression is a great method. For example, if we are looking at test scores that are bound between 0 and 100. It is a very flexible method and allows for some extra analysis regarding the variation. For this, we are going to use the betareg package. But first, we are going to reach a little and create a ficticiously bound variable in the data set. ## Variable bound between 0 and 1 df$beta_var &lt;- sample(seq(.05, .99, by = .01), size = length(df$asthma), replace = TRUE) library(betareg) fit_beta &lt;- betareg(beta_var ~ asthma + race + famsize, data = df) summary(fit_beta) ## ## Call: ## betareg(formula = beta_var ~ asthma + race + famsize, data = df) ## ## Standardized weighted residuals 2: ## Min 1Q Median 3Q Max ## -2.0227 -0.7029 -0.0426 0.6073 2.8922 ## ## Coefficients (mean model with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.160243 0.063353 2.529 0.0114 * ## asthma 0.005440 0.043769 0.124 0.9011 ## raceOtherHispanic -0.086097 0.072109 -1.194 0.2325 ## raceWhite -0.034077 0.058832 -0.579 0.5624 ## raceBlack -0.049811 0.061077 -0.816 0.4148 ## raceOther 0.006587 0.065467 0.101 0.9199 ## famsize -0.005400 0.010837 -0.498 0.6183 ## ## Phi coefficients (precision model with identity link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (phi) 2.45843 0.04474 54.95 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Type of estimator: ML (maximum likelihood) ## Log-likelihood: 81.69 on 8 Df ## Pseudo R-squared: 0.0007061 ## Number of iterations: 17 (BFGS) + 1 (Fisher scoring) The output provides coefficients and the “Phi” coefficients. Both are important parts of using beta regression but we are not going to discuss it here. There are many resources available to learn more about beta regression and each of these GLM’s. As for now, we are going to move on to more complex modeling where there are clustering or repeated measures in the data. Conclusions One of the great things about R is that most modeling is very similar to the basic lm() function. In all of these GLM’s the arguments are nearly all the same: a formula, the data, and family of model. As you’ll see for Multilevel and Other Models chapters, this does not change much. Having a good start with basic models and GLM’s gets you ready for nearly every other modeling type in R. Technically, logistic regression is a linear regression model.↩ "],
["chapter-6-multilevel-modeling.html", "Chapter 6: Multilevel Modeling GEE Mixed Effects Conclusions", " Chapter 6: Multilevel Modeling “Simplicity does not precede complexity, but follows it.” — Alan Perlis Multilevel data are more complex and don’t meet the assumptions of regular linear or generalized linear models. But with the right modeling schemes, the results can be very interpretable and actionable. Two powerful forms of multilevel modeling are: Generalized Estimating Equations (GEE) Mixed effects (ME; i.e., hierarchical linear modeling, multilevel modeling) Several similarities and differences should be noted briefly. As for similarities, they both attempt to control for the lack of independence within clusters, although they do it in different ways. Also, they are both built on linear regression which makes them flexible and powerful at finding relationships in the data. The differences are subtle but important. First, the interpretation is somewhat different between the two. GEE is a population-averaged (e.g., marginal) model whereas ME is subject specific. In other words, GEE is the average effect while ME is the effect found in the average person. In a linear model, these coefficients are the same but when we use different forms such as logistic or poisson, these can be quite different (although in my experience they generally tell a similar story). Second, ME models are much more complex than the GEE models and can struggle with convergence compared to the GEE. This also means that GEE’s are generally fitted much more quickly. Still the choice of the modeling technique should be driven by your hypotheses and not totally dependent on speed of the computation. First, if we needed to, we’d reshape our data so that it is ready for the analyses. For both modeling techniques we want our data in long form16. What this implies is that each row is an observation. What this actually means about the data depends on the data. For example, if you have repeated measures, then often data is stored in wide form—a row is an individual. To make this long, we want each time point within a person to be a row—a single individual can have multiple rows but each row is a unique observation. Currently, our data is in long form since we are working within community clusters within this data. So, each row is an observation and each cluster has multiple rows. Note that although these analyses will be within community clusters instead of within subjects (i.e. repeated measures), the overall steps will be the exact same. This chapter certainly does not cover all of multilevel modeling in R. Entire books are dedicated to that single subject. Rather, we are introducing the methods and the packages that can be used to start using these methods. GEE There are two packages, intimately related, that allow us to perform GEE modeling—gee and geepack. These have some great features and make running a fairly complex model pretty simple. However, as great as they are, there are some annoying shortcomings. We’ll get to a few of them throughout this section. GEE’s, in general, want a few pieces of information from you. First, the outcome and predictors. This is just as in linear regression and GLM’s. Second, we need to provide a correlation structure. This tells the model the approximate pattern of correlations between the time points or clusters. It also wants a variable that tells the cluster ID’s. Finally, it also wants the family (i.e. the type of distribution). Since this is not longitudinal, but rather clustered within communities, we’ll assume for this analysis an unstructured correlation structure. It is the most flexible and we have enough power for it here. For geepack to work, we need to filter out the missing values for the variables that will be in the model. df2 &lt;- df %&gt;% filter(complete.cases(dep, famsize, sed, race, asthma)) Now, we’ll build the model with both packages (just for demonstration). We predict depression with asthma, family size, minutes of sedentary behavior, and the subject’s race. library(gee) fit_gee &lt;- gee(dep ~ asthma + famsize + sed + race, data = df2, id = df2$sdmvstra, corstr = &quot;unstructured&quot;) ## (Intercept) asthmaAsthma famsize sed ## 2.500022059 1.356081567 -0.042132178 0.001362226 ## raceOtherHispanic raceWhite raceBlack raceOther ## 1.184995689 0.113949209 0.100536695 -0.555478773 summary(fit_gee)$coef ## Estimate Naive S.E. Naive z Robust S.E. ## (Intercept) 2.495509790 0.2867816215 8.7017773 0.2690426648 ## asthmaAsthma 1.353039007 0.1867101195 7.2467363 0.2137975620 ## famsize -0.039489294 0.0461945052 -0.8548483 0.0457474654 ## sed 0.001358042 0.0003362291 4.0390382 0.0003551901 ## raceOtherHispanic 1.192481318 0.3075562837 3.8772783 0.3309608614 ## raceWhite 0.116185743 0.2531554533 0.4589502 0.2279687738 ## raceBlack 0.096800821 0.2625826864 0.3686489 0.2360498473 ## raceOther -0.555053605 0.2809301544 -1.9757708 0.2406566044 ## Robust z ## (Intercept) 9.2755169 ## asthmaAsthma 6.3285989 ## famsize -0.8632018 ## sed 3.8234244 ## raceOtherHispanic 3.6030886 ## raceWhite 0.5096564 ## raceBlack 0.4100864 ## raceOther -2.3064133 library(geepack) fit_geeglm &lt;- geeglm(dep ~ asthma + famsize + sed + race, data = df2, id = df2$sdmvstra, corstr = &quot;unstructured&quot;) summary(fit_geeglm) ## ## Call: ## geeglm(formula = dep ~ asthma + famsize + sed + race, data = df2, ## id = df2$sdmvstra, corstr = &quot;unstructured&quot;) ## ## Coefficients: ## Estimate Std.err Wald Pr(&gt;|W|) ## (Intercept) 2.5579361 0.2700717 89.706 &lt; 2e-16 *** ## asthmaAsthma 1.3492892 0.2156202 39.159 3.91e-10 *** ## famsize -0.0446716 0.0457087 0.955 0.328415 ## sed 0.0013015 0.0003548 13.454 0.000244 *** ## raceOtherHispanic 1.1750373 0.3318983 12.534 0.000400 *** ## raceWhite 0.0806377 0.2295661 0.123 0.725392 ## raceBlack 0.0642028 0.2363255 0.074 0.785875 ## raceOther -0.5902049 0.2413379 5.981 0.014463 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Estimated Scale Parameters: ## Estimate Std.err ## (Intercept) 19.49 0.7843 ## ## Correlation: Structure = unstructured Link = identity ## ## Estimated Correlation Parameters: ## Estimate Std.err ## alpha.1:2 0.12480 0.01654 ## alpha.1:3 0.42070 0.10339 ## alpha.1:4 2.89640 1.06678 ## alpha.1:5 -1.85447 0.20276 ## alpha.2:3 0.12238 0.06330 ## alpha.2:4 -0.08935 0.20229 ## alpha.2:5 0.20541 0.03720 ## alpha.3:4 -0.49597 0.11227 ## alpha.3:5 0.25045 0.03879 ## alpha.4:5 -0.66939 0.08761 ## Number of clusters: 4109 Maximum cluster size: 5 The gee package doesn’t directly provide p-values but provides the z-scores, which can be used to find the p-values. The geepack provides the p-values in the way you’ll see in the lm() and glm() functions. These models are interpreted just as the regular GLM. It has adjusted for the correlations within the clusters and provides valid standard errors and p-values. Mixed Effects Mixed effects models require a bit more thinking about the effects. It is called “mixed effects” because we include both fixed and random effects into the model simultaneously. The random effects are those that we don’t necessarily care about the specific values but want to control for it and/or estimate the variance. The fixed effects are those we are used to estimating in linear models and GLM’s. These are a bit more clear with an example. We will do the same overall model as we did with the GEE but we’ll use ME. To do so, we’ll use the lme4 package. In the model below, we predict depression with asthma, family size, minutes of sedentary behavior, and the subject’s race. We have a random intercept (which allows the intercept to vary across clusters). library(lme4) fit_me &lt;- lmer(dep ~ asthma + famsize + sed + race + (1 | cluster), data = df2, REML = FALSE) summary(fit_me) ## Linear mixed model fit by maximum likelihood [&#39;lmerMod&#39;] ## Formula: dep ~ asthma + famsize + sed + race + (1 | cluster) ## Data: df2 ## ## AIC BIC logLik deviance df.resid ## 25780 25844 -12880 25760 4427 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.327 -0.635 -0.355 0.272 5.435 ## ## Random effects: ## Groups Name Variance Std.Dev. ## cluster (Intercept) 0.105 0.324 ## Residual 19.389 4.403 ## Number of obs: 4437, groups: cluster, 14 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 2.491678 0.302768 8.23 ## asthmaAsthma 1.335445 0.186618 7.16 ## famsize -0.042857 0.046341 -0.92 ## sed 0.001425 0.000337 4.23 ## raceOtherHispanic 1.289890 0.320595 4.02 ## raceWhite 0.008348 0.259449 0.03 ## raceBlack 0.171658 0.273382 0.63 ## raceOther -0.552746 0.285512 -1.94 ## ## Correlation of Fixed Effects: ## (Intr) asthmA famsiz sed rcOthH racWht rcBlck ## asthmaAsthm -0.042 ## famsize -0.510 -0.004 ## sed -0.324 -0.044 0.051 ## rcOthrHspnc -0.556 -0.032 0.051 -0.038 ## raceWhite -0.680 -0.038 0.135 -0.148 0.639 ## raceBlack -0.643 -0.057 0.094 -0.131 0.624 0.775 ## raceOther -0.580 0.000 0.048 -0.135 0.589 0.725 0.693 You’ll see that there are no p-values provided here. This is because p-values are not well-defined in the ME framework. A good way to test it can be through the anova() function, comparing models. Let’s compare a model with and without asthma to see if the model is significantly better with it in. fit_me1 &lt;- lmer(dep ~ famsize + sed + race + (1 | cluster), data = df2, REML = FALSE) anova(fit_me, fit_me1) ## Data: df2 ## Models: ## fit_me1: dep ~ famsize + sed + race + (1 | cluster) ## fit_me: dep ~ asthma + famsize + sed + race + (1 | cluster) ## Df AIC BIC logLik deviance Chisq Chi Df Pr(&gt;Chisq) ## fit_me1 9 25829 25886 -12905 25811 ## fit_me 10 25780 25844 -12880 25760 50.9 1 9.9e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 This comparison strongly suggests that asthma is a significant predictor (\\(\\chi^2 = 50.5\\), p &lt; .001). We can do this with both fixed and random effects, as below: fit_me2 &lt;- lmer(dep ~ famsize + sed + race + (1 | cluster), data = df2, REML = TRUE) fit_me3 &lt;- lmer(dep ~ famsize + sed + race + (1 + asthma | cluster), data = df2, REML = TRUE) anova(fit_me2, fit_me3, refit = FALSE) ## Data: df2 ## Models: ## fit_me2: dep ~ famsize + sed + race + (1 | cluster) ## fit_me3: dep ~ famsize + sed + race + (1 + asthma | cluster) ## Df AIC BIC logLik deviance Chisq Chi Df Pr(&gt;Chisq) ## fit_me2 9 25855 25912 -12918 25837 ## fit_me3 11 25821 25892 -12900 25799 37.3 2 8e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Here, including random slopes for asthma appears to be significant (\\(\\chi^2 = 36.9\\), p &lt; .001). Linear mixed effects models converge pretty well. You’ll see that the conclusions and estimates are very similar to that of the GEE. For generalized versions of ME, the convergence can be harder and more picky. As we’ll see below, it complains about large eigenvalues and tells us to rescale some of the variables. library(lme4) fit_gme &lt;- glmer(dep2 ~ asthma + famsize + sed + race + (1 | cluster), data = df2, family = &quot;binomial&quot;) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control ## $checkConv, : Model failed to converge with max|grad| = 0.00854237 (tol = ## 0.001, component 1) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model is nearly unidentifiable: very large eigenvalue ## - Rescale variables?;Model is nearly unidentifiable: large eigenvalue ratio ## - Rescale variables? After a quick check, we can see that sed is huge compared to the other variables. If we simply rescale it, using the I() function within the model formula, we can rescale it by 1,000. Here, that is all it needed to converge. library(lme4) fit_gme &lt;- glmer(dep2 ~ asthma + famsize + I(sed/1000) + race + (1 | cluster), data = df2, family = &quot;binomial&quot;) summary(fit_gme) ## Generalized linear mixed model fit by maximum likelihood (Laplace ## Approximation) [glmerMod] ## Family: binomial ( logit ) ## Formula: dep2 ~ asthma + famsize + I(sed/1000) + race + (1 | cluster) ## Data: df2 ## ## AIC BIC logLik deviance df.resid ## 2665 2722 -1323 2647 4428 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.635 -0.329 -0.295 -0.258 5.032 ## ## Random effects: ## Groups Name Variance Std.Dev. ## cluster (Intercept) 0.0232 0.152 ## Number of obs: 4437, groups: cluster, 14 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -2.6316 0.2435 -10.81 &lt; 2e-16 *** ## asthmaAsthma 0.5619 0.1281 4.39 1.2e-05 *** ## famsize -0.0336 0.0374 -0.90 0.3696 ## I(sed/1000) 0.5835 0.2618 2.23 0.0258 * ## raceOtherHispanic 0.7564 0.2421 3.12 0.0018 ** ## raceWhite 0.0955 0.2159 0.44 0.6581 ## raceBlack 0.0531 0.2277 0.23 0.8155 ## raceOther -0.4950 0.2591 -1.91 0.0560 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) asthmA famsiz I(/100 rcOthH racWht rcBlck ## asthmaAsthm -0.057 ## famsize -0.491 -0.012 ## I(sed/1000) -0.324 -0.042 0.031 ## rcOthrHspnc -0.653 -0.031 0.044 -0.029 ## raceWhite -0.715 -0.037 0.132 -0.148 0.709 ## raceBlack -0.684 -0.064 0.088 -0.124 0.715 0.781 ## raceOther -0.571 -0.003 0.046 -0.122 0.606 0.688 0.653 Conclusions This has been a really brief introduction into a thriving, large field of statistical analyses. These are the general methods for using R to analyze multilevel data. Our next chapter will discuss more modeling techniques in R, including mediation, mixture, and structural equation modeling. We discuss what this means in much more depth and demonstrate reshaping of data in Chapter 8. It is an important tool to understand if you are working with data in various forms. Although many reshape their data by copying-and-pasting in a spreadsheet, what we present in Chapter 8 is much more efficient, cleaner, less error-prone, and replicatable.↩ "],
["chapter-7-other-modeling-techniques.html", "Chapter 7: Other Modeling Techniques Mediation Modeling Structural Equation Modeling Machine Learning Techniques Conclusions", " Chapter 7: Other Modeling Techniques “Simplicity is the ultimate sophistication.” — Leonardo da Vinci In this chapter we cover, however briefly, modeling techniques that are especially useful to make complex relationships easier to interpret. We will focus on mediation and moderation modeling, methods relating to structural equation modeling (SEM), and methods applicable to our field from machine learning. Although these machine learning may appear very different than mediation and SEM, they each have advantages that can help in different situations. For example, SEM is useful when we know there is a high degree of measurement error or our data has multiple indicators for each construct. On the other hand, regularized regression and random forests–two popular forms of machine learning–are great to explore patterns and relationships there are hundreds or thousands of variables that may predict an outcome. Mediation modeling, although often used within SEM, can help us understand pathways of effect from one variable to another. It is especially useful with moderating variables (i.e., variables that interact with another). So we’ll start with discussing mediation, then we’ll move on to SEM, followed by machine learning. Mediation Modeling Mediation modeling can be done via several packages. For now, we recommend using lavaan (stands for “latent variable analysis”)17. Although it is technically still a “beta” version, it performs very well especially for more simple models. It makes mediation modeling straightforward. Below, we model the following mediation model: \\[ depression = \\beta_0 + \\beta_1 asthma + \\epsilon_1 \\] \\[ time_{Sedentary} = \\lambda_0 + \\lambda_1 asthma + \\lambda_2 depression + \\epsilon_2 \\] In essence, we believe that asthma increases depression which in turn increases the amount of time spent being sedentary. library(lavaan) df$sed_hr = df$sed/60 ## in hours instead of minutes ## Our model model1 &lt;- &#39; dep ~ asthma sed_hr ~ dep + asthma &#39; ## sem function to run the model fit &lt;- sem(model1, data = df) summary(fit) ## lavaan (0.5-22) converged normally after 30 iterations ## ## Used Total ## Number of observations 4614 4632 ## ## Estimator ML ## Minimum Function Test Statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Standard Errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## dep ~ ## asthma 1.478 0.183 8.084 0.000 ## sed_hr ~ ## dep 0.044 0.011 3.929 0.000 ## asthma 0.412 0.139 2.965 0.003 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .dep 19.597 0.408 48.031 0.000 ## .sed_hr 11.171 0.233 48.031 0.000 From the output we see asthma does predict depression and depression does predict time being sedentary. There is also a direct effect of asthma on sedentary behavior even after controlling for depression. We can further specify the model to have it give us the indirect effect and direct effects tested. ## Our model model2 &lt;- &#39; dep ~ a*asthma sed_hr ~ b*dep + c*asthma indirect := a*b total := c + a*b &#39; ## sem function to run the model fit2 &lt;- sem(model2, data = df) summary(fit2) ## lavaan (0.5-22) converged normally after 30 iterations ## ## Used Total ## Number of observations 4614 4632 ## ## Estimator ML ## Minimum Function Test Statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Standard Errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## dep ~ ## asthma (a) 1.478 0.183 8.084 0.000 ## sed_hr ~ ## dep (b) 0.044 0.011 3.929 0.000 ## asthma (c) 0.412 0.139 2.965 0.003 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .dep 19.597 0.408 48.031 0.000 ## .sed_hr 11.171 0.233 48.031 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## indirect 0.065 0.018 3.534 0.000 ## total 0.477 0.138 3.448 0.001 We defined a few things in the model. First, we gave the coefficients labels of a, b, and c. Doing so allows us to define the indirect and total effects. Here we see the indirect effect, although small, is significant at \\(p &lt; .001\\). The total effect is larger (not surprising) and is also significant. Also note that we can make the regression equations have other covariates as well if we needed to (i.e. control for age or gender) just as we do in regular regression. ## Our model model2.1 &lt;- &#39; dep ~ asthma + ridageyr sed_hr ~ dep + asthma + ridageyr &#39; ## sem function to run the model fit2.1 &lt;- sem(model2.1, data = df) summary(fit2.1) ## lavaan (0.5-22) converged normally after 33 iterations ## ## Used Total ## Number of observations 4614 4632 ## ## Estimator ML ## Minimum Function Test Statistic 0.000 ## Degrees of freedom 0 ## Minimum Function Value 0.0000000000000 ## ## Parameter Estimates: ## ## Information Expected ## Standard Errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## dep ~ ## asthma 1.462 0.183 7.980 0.000 ## ridageyr -0.005 0.004 -1.330 0.183 ## sed_hr ~ ## dep 0.044 0.011 3.927 0.000 ## asthma 0.412 0.139 2.956 0.003 ## ridageyr -0.000 0.003 -0.063 0.950 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .dep 19.590 0.408 48.031 0.000 ## .sed_hr 11.171 0.233 48.031 0.000 Although we don’t show it here, we can also do moderation (“interactions”) as part of the mediation model. Structural Equation Modeling Instead of summing our depression variable, we can use SEM to run the mediation model from above but use the latent variable of depression instead. ## Our model model3 &lt;- &#39; dep1 =~ dpq010 + dpq020 + dpq030 + dpq040 + dpq050 + dpq060 + dpq070 + dpq080 + dpq090 dep1 ~ a*asthma sed_hr ~ b*dep1 + c*asthma indirect := a*b total := c + a*b &#39; ## sem function to run the model fit3 &lt;- sem(model3, data = df) summary(fit3) ## lavaan (0.5-22) converged normally after 47 iterations ## ## Used Total ## Number of observations 4614 4632 ## ## Estimator ML ## Minimum Function Test Statistic 1065.848 ## Degrees of freedom 43 ## P-value (Chi-square) 0.000 ## ## Parameter Estimates: ## ## Information Expected ## Standard Errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) ## dep1 =~ ## dpq010 1.000 ## dpq020 1.096 0.024 45.136 0.000 ## dpq030 1.133 0.031 36.908 0.000 ## dpq040 1.149 0.030 38.066 0.000 ## dpq050 0.933 0.025 36.773 0.000 ## dpq060 0.929 0.022 42.107 0.000 ## dpq070 0.871 0.022 39.760 0.000 ## dpq080 0.686 0.019 36.325 0.000 ## dpq090 0.308 0.011 28.544 0.000 ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## dep1 ~ ## asthma (a) 0.173 0.023 7.656 0.000 ## sed_hr ~ ## dep1 (b) 0.342 0.105 3.275 0.001 ## asthma (c) 0.418 0.139 2.998 0.003 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .dpq010 0.306 0.007 42.008 0.000 ## .dpq020 0.212 0.006 37.549 0.000 ## .dpq030 0.559 0.013 43.807 0.000 ## .dpq040 0.514 0.012 43.302 0.000 ## .dpq050 0.384 0.009 43.862 0.000 ## .dpq060 0.221 0.005 40.808 0.000 ## .dpq070 0.249 0.006 42.420 0.000 ## .dpq080 0.217 0.005 44.038 0.000 ## .dpq090 0.090 0.002 46.106 0.000 ## .sed_hr 11.179 0.233 48.012 0.000 ## .dep1 0.256 0.010 24.657 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## indirect 0.059 0.020 3.019 0.003 ## total 0.477 0.138 3.448 0.001 We defined dep1 as a latent variable using =~. The regression, indirect, and total results are very similar the summed score version. Although the model does not fit the data well–“P-value (Chi-square) = 0.000”–it is informative for demonstration. We would likely need to find out how the measurement model (dep1 =~ dpq010 + dpq020 + dpq030 +) actually fits before throwing it into a mediation model. We can do that via: model4 &lt;- &#39; dep1 =~ dpq010 + dpq020 + dpq030 + dpq040 + dpq050 + dpq060 + dpq070 + dpq080 + dpq090 &#39; fit4 &lt;- cfa(model4, data=df) summary(fit4) ## lavaan (0.5-22) converged normally after 29 iterations ## ## Number of observations 4632 ## ## Estimator ML ## Minimum Function Test Statistic 985.831 ## Degrees of freedom 27 ## P-value (Chi-square) 0.000 ## ## Parameter Estimates: ## ## Information Expected ## Standard Errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) ## dep1 =~ ## dpq010 1.000 ## dpq020 1.097 0.024 45.383 0.000 ## dpq030 1.128 0.031 36.962 0.000 ## dpq040 1.145 0.030 38.136 0.000 ## dpq050 0.927 0.025 36.630 0.000 ## dpq060 0.930 0.022 42.294 0.000 ## dpq070 0.870 0.022 39.941 0.000 ## dpq080 0.681 0.019 36.350 0.000 ## dpq090 0.307 0.011 28.609 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .dpq010 0.306 0.007 42.051 0.000 ## .dpq020 0.211 0.006 37.470 0.000 ## .dpq030 0.560 0.013 43.909 0.000 ## .dpq040 0.515 0.012 43.400 0.000 ## .dpq050 0.390 0.009 44.041 0.000 ## .dpq060 0.221 0.005 40.835 0.000 ## .dpq070 0.249 0.006 42.461 0.000 ## .dpq080 0.216 0.005 44.149 0.000 ## .dpq090 0.090 0.002 46.195 0.000 ## dep1 0.261 0.011 24.765 0.000 As we can see, there is a lack of fit in the measurement model. It is possible that these depression questions could be measuring more than one factor. We could explore this using exploratory factor analysis. We don’t demonstrate that here, but know that it is possible to do in R with a few other packages. Machine Learning Techniques We are briefly going to introduce some machine learning techniques that may be of interest to researchers. We will quickly introduce and demonstrate: Ridge, Lasso and Elastic Net Random Forests Ridge, Lasso and Elastic Net In order to do either ridge, lasso, or elastic net regression, we can use the fantastic glmnet package. Using the cv.glmnet() function we can run the ridge (\\(alpha = 0\\)), lasso (\\(alpha = 1\\) which is default), and elastic net (\\(0 \\leq alpha \\leq 1\\)). It turns out that elastic net is the combination of the ridge and lasso methods and the closer alpha is to 1 the more it acts like lasso and the closer it is to 0 the more it acts like ridge. Lasso and elastic net can do variable selection in addition to estimation. Ridge is great at handling correlated predictors. Each of them are better than conventional methods at prediction and each of them can handle large numbers of predictors. To learn more see “Introduction to Statistical Learning” by Daniela Witten, Gareth James, Robert Tibshirani, and Trevor Hastie. A feww PDF is available on their website. To use the package, it wants the data in a very specific form. First, we need to remove any missingness. We use na.omit() to do this. We take all the predictors (without the outcome) and put it in a data matrix object. We only include a few for the demonstration but you can include many predictors. We name ours X. Y is our outcome. df2 &lt;- df %&gt;% dplyr::select(riagendr, ridageyr, ridreth3, race, famsize, dep, asthma, sed_hr) %&gt;% na.omit X &lt;- df2 %&gt;% dplyr::select(-sed_hr) %&gt;% data.matrix Y &lt;- df2$sed_hr Then we use the cv.glmnet() function to fit the different models. The “cv” refers to cross-validation18, which we don’t discuss here, but it an important topic to become familiar with. Below we fit a ridge, a lasso, and an elastic net model. The elastic net model uses more of the lasso penalty because the alpha is closer to 1 than 0. library(glmnet) fit_ridge &lt;- cv.glmnet(X, Y, alpha = 0) fit_lasso &lt;- cv.glmnet(X, Y, alpha = 1) fit_enet &lt;- cv.glmnet(X, Y, alpha = .8) The plots below show where appropriate lambda values are based on the mean squared error of the cross-validated prediction. The vertical dashed lines show a reasonable range of lambda values that can be used. par(mfrow = c(2,2)) ## put plots together on 2 x 2 grid plot(fit_ridge) plot(fit_lasso) plot(fit_enet) We can get the coefficients at a reasonable lambda. Specifically, we use the “1-SE rule” (near the right hand side vertical dashed lines in the above plots) by s = &quot;lambda.1se&quot;. You can directly tell it what lambda value you’d like but this is a simple rule of thumb. coef(fit_ridge, s = &quot;lambda.1se&quot;) ## 8 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 5.851093 ## riagendr 0.022850 ## ridageyr -0.000274 ## ridreth3 0.029608 ## race 0.047229 ## famsize -0.020334 ## dep 0.005322 ## asthma 0.052348 coef(fit_lasso, s = &quot;lambda.1se&quot;) ## 8 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 5.322680 ## riagendr . ## ridageyr . ## ridreth3 . ## race 0.278799 ## famsize -0.043976 ## dep 0.008615 ## asthma . coef(fit_enet, s = &quot;lambda.1se&quot;) ## 8 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 5.4071934 ## riagendr . ## ridageyr . ## ridreth3 . ## race 0.2424455 ## famsize -0.0206231 ## dep 0.0002651 ## asthma . Although we briefly introduce these regression methods, they are indeed very important. We highly recommend learning more about them. Random Forests Random forests is another machine learning method that can do fantastic prediction. It is built in a very different way than the methods we have discussed up to this point. It is not built on a linear modeling scheme; rather, it is built on classification and regression trees (CART). Again, “Introduction to Statistical Learning” is a great resource to learn more. Conveniently, we can use the randomForest package. We specify the model by the formula sed_hr ~ . which means we want sed_hr to be the outcome and all the rest of the variables to be predictors. library(randomForest) ## randomForest 4.6-12 ## Type rfNews() to see new features/changes/bug fixes. ## ## Attaching package: &#39;randomForest&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine ## The following object is masked from &#39;package:ggplot2&#39;: ## ## margin fit_rf &lt;- randomForest(sed_hr ~ ., data = df2) fit_rf ## ## Call: ## randomForest(formula = sed_hr ~ ., data = df2) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 2 ## ## Mean of squared residuals: 10.8 ## % Var explained: 3.9 We can find out which variables were important in the model via: par(mfrow=c(1,1)) ## back to one plot per page varImpPlot(fit_rf) We can see that age (ridageyr) is the most important variable, depression (dep) follows, with the family size (famsize) the third most important in the random forests model. Conclusions Although we only discussed these methods briefly, that does not mean they are less important. On the contrary, they are essential upper level statistical methods. This brief introduction hopefully helped you know what R is capable of across a wide range of methods. The next chapter begins our “advanced” topics, starting with “Advanced Data Manipulation”. The lavaan package has some great vignettes at http://lavaan.ugent.be/ to help with the other types of models it can handle.↩ Cross-validation is a common way to reduce over-fitting and make sure your model is generalizable. Generally, you split your data into training and testing sets. It is very common in machine learning and is beginning to be practiced in academic fields as well. We recommend using it as often as you can, especially with these methods but also to make sure your other models are accurate on new data as well.↩ "],
["chapter-8-advanced-data-manipulation.html", "Chapter 8: Advanced Data Manipulation Your Own Functions Vectorized For Loops The apply family Using “Anonymous Functions” in Apply Conclusions", " Chapter 8: Advanced Data Manipulation “Every new thing creates two new questions and two new opportunities.” — Jeff Bezos There’s so much more we can do with data in R than what we’ve presented. One of the main ways that R can help you in your research is by looping. Looping, for our purposes, refers to the ability to repeat something across many variables or data sets. There’s many ways of doing this but some are better than others. We will introduce: vectorized functions, for loops, and the apply family of functions. But first, we need to discuss how to create your own functions. This is very useful for things you do a lot and reduces errors and redundancies in your code. Your Own Functions Let’s create a function that estimates the mean (although it is completely unnecessary since there is already a perfectly good mean() function). mean2 &lt;- function(x){ n &lt;- length(x) m &lt;- (1/n) * sum(x) return(m) } We create a function using the function() function.19 Within the function() we put an x. This is the argument that the function will ask for. Here, it is a numeric vector that we want to take the mean of. We then provide the meat of the function between the {}. Here, we did a simple mean calculation using the length(x) which gives us the number of observations, and sum() which sums the numbers in x. Let’s give it a try: v1 &lt;- c(1,3,2,4,2,1,2,1,1,1) ## vector to try mean2(v1) ## our function ## [1] 1.8 mean(v1) ## the base R function ## [1] 1.8 Looks good! These functions that you create can do whatever you need them to (within the bounds that R can do). I recommend by starting outside of a function that then put it into a function. For example, we would start with: n &lt;- length(v1) m &lt;- (1/n) * sum(v1) m ## [1] 1.8 and once things look good, we would put it into a function like we had before with mean2. It is an easy way to develop a good function and test it while developing it. By creating your own function, you can simplify your workflow and can use them in loops, the apply functions and the purrr package. For practice, we will write one more function. Let’s make a function that takes a vector and gives us the N, the mean, and the standard deviation. important_statistics &lt;- function(x, na.rm=FALSE){ N &lt;- length(x) M &lt;- mean(x, na.rm=na.rm) SD &lt;- sd(x, na.rm=na.rm) final &lt;- c(N, M, SD) return(final) } One of the first things you should note is that we included a second argument in the function seen as na.rm=FALSE (you can have as many arguments as you want within reason). This argument has a default that we provide as FALSE as it is in most functions that use the na.rm argument. We take what is provided in the na.rm and give that to both the mean() and sd() functions. Finally, you should notice that we took several pieces of information and combined them into the final object and returned that. Let’s try it out with the vector we created earlier. important_statistics(v1) ## [1] 10.000 1.800 1.033 Looks good but we may want to change a few aesthetics. In the following code, we adjust it so we have each one labeled. important_statistics2 &lt;- function(x, na.rm=FALSE){ N &lt;- length(x) M &lt;- mean(x, na.rm=na.rm) SD &lt;- sd(x, na.rm=na.rm) final &lt;- data.frame(N, &quot;Mean&quot;=M, &quot;SD&quot;=SD) return(final) } important_statistics2(v1) ## N Mean SD ## 1 10 1.8 1.033 We will come back to this function and use it in some loops and see what else we can do with it. Vectorized By construction, R is the fastest when we use the vectorized form of doing things. For example, when we want to add two variables together, we can use the + operator. Like most functions in R, it is vectorized and so it is fast. Below we create a new vector using the rnorm() function that produces normally distributed random variables. First argument in the function is the length of the vector, followed by the mean and SD. v2 &lt;- rnorm(10, mean=5, sd=2) add1 &lt;- v1 + v2 round(add1, 3) ## [1] 5.911 7.832 3.692 12.472 8.405 5.506 10.739 6.021 6.117 3.322 We will compare the speed of this to other ways of adding two variables together and see it is the simplest and quickest. For Loops For loops have a bad reputation in the R world. This is because, in general, they are slow. It is among the slowest of ways to iterate (i.e., repeat) functions. We start here to show you, in essence, what the apply family of functions are doing, often, in a faster way. At times, it is easiest to develop a for loop and then take it and use it within the apply or purrr functions. It can help you think through the pieces that need to be done in order to get your desired result. For demonstration, we are using the for loop to add two variables together. The code between the ()’s tells R information about how many loops it should do. Here, we are looping through 1:10 since there are ten observations in each vector. We could also specify this as 1:length(v1). When using for loops, we need to keep in mind that we need to initialize a variable in order to use it within the loop. That’s precisely what we do with the add2, making it a numberic vector with 10 observations. add2 &lt;- vector(&quot;numeric&quot;, 10) ## Initialize for (i in 1:10){ add2[i] &lt;- v1[i] + v2[i] } round(add2, 3) ## [1] 5.911 7.832 3.692 12.472 8.405 5.506 10.739 6.021 6.117 3.322 Same results! But, we’ll see later that the speed is much than the vectorized function. The apply family The apply family of functions that we’ll introduce are: apply() lapply() sapply() tapply() Each essentially do a loop over the data you provide using a function (either one you created or another). The different versions are extremely similar with some minor differences. For apply() you tell it if you want to iterative over the columns or rows; lapply() assumes you want to iterate over the columns and outputs a list (hence the l); sapply() is similar to lapply() but outputs vectors and data frames. tapply() has the most differences because it can iterative over columns by a grouping variable. We’ll show apply(), lapply() and tapply() below. For example, we can add two variables together here. We provide it the data.frame that has the variables we want to add together. df &lt;- data.frame(v1, v2) add3 &lt;- apply(df, 1, sum) round(add3, 3) ## [1] 5.911 7.832 3.692 12.472 8.405 5.506 10.739 6.021 6.117 3.322 The function apply() has three main arguments: a) the data.frame or list of data, b) 1 meaning to apply the function for each row or 2 to the columns, and c) the function to use. We can also use one of our own functions such as important_statistics2() within the apply family. lapply(df, important_statistics2) ## $v1 ## N Mean SD ## 1 10 1.8 1.033 ## ## $v2 ## N Mean SD ## 1 10 5.202 2.261 This gives us a list of two elements, one for each variable, with the statistics that our function provides. With a little adjustment, we can make this into a data.frame using the do.call() function with &quot;rbind&quot;. do.call(&quot;rbind&quot;, lapply(df, important_statistics2)) ## N Mean SD ## v1 10 1.800 1.033 ## v2 10 5.202 2.261 tapply() allows us to get information by a grouping factor. We are going to add a factor variable to the data frame we are using df and then get the mean of the variables by group. group1 &lt;- factor(sample(c(0,1), 10, replace=TRUE)) tapply(df$v1, group1, mean) ## 0 1 ## 1.8 1.8 We now have the means by each group. This, however, is probably replaced by the 3 step summary that we learned earlier in dplyr using group_by() and summarize(). These functions are useful in many situations, especially where there are no vectorized functions. You can always get an idea of whether to use a for loop or an apply function by giving it a try on a small subset of data to see if one is better and/or faster. Speed Comparison We can test to see how fast functions are with the microbenchmark package. Since it wants functions, we will create a function that uses the for looop. forloop &lt;- function(var1, var2){ add2 &lt;- vector(&quot;numeric&quot;, length(var1)) for (i in 1:10){ add2[i] &lt;- var1[i] + var2[i] } return(add2) } Below, we can see that the vectorized version is nearly 50 times faster than the for loop and 300 times faster than the apply. Although the for loop was faster here, sometimes it can be slower than the apply functions–it just depends on the situation. But, the vectorized functions will almost always be much faster than anything else. It’s important to note that the + is also a function that can be used as we do below, highlighting the fact that anything that does something to an object in R is a function. library(microbenchmark) microbenchmark(forloop(v1, v2), apply(df, 1, sum), `+`(v1, v2)) ## Unit: nanoseconds ## expr min lq mean median uq max neval cld ## forloop(v1, v2) 9645 11010.0 18716.9 18014.5 21293.0 88435 100 b ## apply(df, 1, sum) 71986 73632.5 97010.5 75112.5 107222.5 269339 100 c ## v1 + v2 183 311.5 890.5 498.5 653.5 31147 100 a Of course, as it says the units are in nanoseconds. Whether a function takes 200 or 200,000 nanoseconds probably won’t change your life. However, if the function is being used repeatedly or on on large data sets, this can make a difference. Using “Anonymous Functions” in Apply Last thing to know here is that you don’t need to create a named function everytime you want to use apply. We can use what is called “Anonymous” functions. Below, we use one to get at the N and mean of the data. lapply(df, function(x) rbind(length(x), mean(x, na.rm=TRUE))) ## $v1 ## [,1] ## [1,] 10.0 ## [2,] 1.8 ## ## $v2 ## [,1] ## [1,] 10.000 ## [2,] 5.202 So we don’t name the function but we design it like we would a named function, just minus the return(). We take x (which is a column of df) and do length() and mean() and bind them by rows. The first argument in the anonymous function will be the column or variable of the data you provide. Here’s another example: lapply(df, function(y) y * 2 / sd(y)) ## $v1 ## [1] 1.936 5.809 3.873 7.746 3.873 1.936 3.873 1.936 1.936 1.936 ## ## $v2 ## [1] 4.343 4.274 1.496 7.493 5.666 3.986 7.730 4.441 4.526 2.054 We take y (again, the column of df), times it by two and divide by the standard deviation of y. Note that this is gibberish and is not some special formula, but again, we can see how flexible it is. The last two examples also show something important regarding the output: The output will be at the level of the anonymous function. The first had two numbers per variable because the function produced two summary statistics for each variable. The second we multiplied y by 2 (so it is still at the individual observation level) and then divide by the SD. This keeps it at the observation level so we get ten values for every variable. We can name the argument anything we want (as long as it is one word). We used x in the first and y in the second but as long as it is the same within the function, it doesn’t matter what you use. Conclusions These are useful tools to use in your own data manipulation beyond that what we discussed with dplyr. It takes time to get used to making your own functions so be patient with yourself as you learn how to get R to do exactly what you want in a condensed, replicable format. With these new tricks up your sleeve, we can move on to more advanced plotting using ggplot2. That seemed like excessive use of the word function… It is important though. So, get used to it!↩ "],
["chapter-9-advanced-plotting.html", "Chapter 9: Advanced Plotting Types of Plots Color Schemes Themes Labels and Titles Facetting Conclusions", " Chapter 9: Advanced Plotting “The commonality between science and art is in trying to see profoundly - to develop strategies of seeing and showing.” — Edward Tufte Once again, we will turn to our friend ggplot2 to plot; but now, we are going to take it to another level. We will use many of the options that this powerful package provides and discuss briefly some important aspects of a good plot. We will go through several aspects of the code that makes plotting in R flexible and beautiful. Types of plots Color schemes Themes Labels and titles Facetting To highlight these features we’ll be using our NHANES data again; specifically, sedentary behavior, depression, asthma, family size, and race. As this is only an introduction, refer to http://docs.ggplot2.org/current/ for more information on ggplot2. To begin, it needs to be understood that the first line where we actually use the ggplot function, will then apply to all subsequent laters (e.g., geom_point()). For example, ggplot(df, aes(x = dep, y = sed, group = asthma)) means for the rest of the layers, unless we over-ride it, each will use df with dep as the x variable, sed as the y, and a grouping on asthma. So when many layers are going to use the same command put it in this so you don’t have to write the same argument many times. A common one here could be: ggplot(df, aes(x = dep, y = sed, group = asthma, color = asthma)) since we often want to color by our grouping variable. Before going forward, a nice feature of ggplot2 allows us to use an “incomplete” plot to add on to. For example, if we have a good idea of the main structure of the plot but want to explore some changes, we can do the following: p1 &lt;- ggplot(df, aes(x = dep, y = sed, group = asthma)) + geom_point() p1 ## Warning: Removed 18 rows containing missing values (geom_point). So now p1 has the information for this basic, and honestly fairly uninformative, plot. We’ll use this feature to build on plots that we like. Some of our figures will also need summary data so we’ll start that here as well: summed_data &lt;- df %&gt;% group_by(asthma, dep2) %&gt;% summarize(s_se = sd(sed, na.rm=TRUE)/sqrt(n()), sed = mean(sed, na.rm=TRUE), N = n()) As you hopefully recognize a bit, we are summarizing the time spent being sedentary by both asthma and the dichotomous depression variables. If it doesn’t make sense at first, read it line by line to see what I did. This will be useful for several types of plots. Types of Plots Scatterplots We’ll start with a scatterplot–one of the most simple yet informative plots. ggplot(df, aes(x = dep, y = sed, group = asthma)) + geom_point(aes(color = asthma)) ## Warning: Removed 18 rows containing missing values (geom_point). It’s not amazing. There looks to be a lot of overlap of the points. Also, it would be nice to know general trend lines for each group. Below, alpha refers to how transparent the points are, method = &quot;lm&quot; refers to how the line should be fit, and se=FALSE tells it not to include error ribbons. ggplot(df, aes(x = dep, y = sed, group = asthma)) + geom_jitter(aes(color = asthma), alpha = .5) + geom_smooth(aes(color = asthma), method = &quot;lm&quot;, se=FALSE) ## Warning: Removed 18 rows containing non-finite values (stat_smooth). ## Warning: Removed 18 rows containing missing values (geom_point). It’s getting better but we could still use some more features. We’ll come back to this in the next sections. Boxplots Box plots are great ways to assess the variability in your data. Below, we create a boxplot but change p1’s x variable so that it is the factor version of depression. ggplot(df, aes(x = factor(dep2), y = sed)) + geom_boxplot() ## Warning: Removed 18 rows containing non-finite values (stat_boxplot). This plot is, at best, mediocre. But there’s more we can do. ggplot(df, aes(x = factor(dep2), y = jitter(sed, 100))) + geom_jitter(alpha = .1, color = &quot;chartreuse4&quot;) + geom_boxplot(alpha = .75, color = &quot;dodgerblue4&quot;) ## Warning: Removed 18 rows containing non-finite values (stat_boxplot). ## Warning: Removed 18 rows containing missing values (geom_point). This now provides the (jittered) raw data points as well to hightlight the noise and the number of observations in each group. Bar Plots Bar plots are great ways to look at means and standard deviations for groups. ggplot(summed_data, aes(x = dep2, y = sed, group = asthma)) + geom_bar(aes(fill = asthma), stat = &quot;identity&quot;, position = &quot;dodge&quot;) We used stat = &quot;identity&quot; to make it based on the mean (default is count), and position = &quot;dodge&quot; makes it so the bars are next to each other as opposed to stacked. Let’s also add error bars. p = position_dodge(width = .9) ggplot(summed_data, aes(x = dep2, y = sed, group = asthma)) + geom_bar(aes(fill = asthma), stat = &quot;identity&quot;, position = p, alpha = .8) + geom_errorbar(aes(ymin = sed - s_se, ymax = sed + s_se, color = asthma), position = p, width = .3) There’s a lot in there but much of it is what you’ve seen before. For example, we use alpha in the geom_bar() to tell it to be slightly transparent so we can see the error bars better. We used the position_dodge() function to specify exactly how much dodge we wanted. In this way, we are able to line up the error bars and the bars. If we just use position = &quot;dodge&quot; we have less flexibility and control. Much more can be done to clean this up, which we’ll show in later sections. Line Plots Line plots are particularly good at showing trends and relationships. Below we we use it to highlight the relationship between depression, sedentary behavior, and asthma. ggplot(summed_data, aes(x = dep2, y = sed, group = asthma)) + geom_line(aes(color = asthma)) Good start, but let’s add some features. pos = position_dodge(width = .1) ggplot(summed_data, aes(x = dep2, y = sed, group = asthma, color = asthma)) + geom_line(position = pos) + geom_point(position = pos) + geom_errorbar(aes(ymin = sed - s_se, ymax = sed + s_se), width = .1, position = pos) That looks a bit better. From here, let’s go on to color schemes to make the plots a bit better. Color Schemes We’ll start by using the scatterplot we made above but we will change the colors a bit using scale_color_manual(). ggplot(df, aes(x = dep, y = sed, group = asthma)) + geom_jitter(aes(color = asthma), alpha = .5) + geom_smooth(aes(color = asthma), method = &quot;lm&quot;, se=FALSE) + scale_color_manual(values = c(&quot;dodgerblue4&quot;, &quot;chartreuse4&quot;)) ## Warning: Removed 18 rows containing non-finite values (stat_smooth). ## Warning: Removed 18 rows containing missing values (geom_point). Depending on your personal taste, you can adjust it with any color. On my blog, I’ve posted the colors available in R (there are many). Advice: Don’t get too lost in selecting colors but it can add a nice touch to any plot. The nuances of plot design can be invigorating but also time consuming to be smart about how long you spend using it. Next, let’s adjust the bar plot. We will also add some colors here, but we will differentiate between “color” and “fill”. Fill fills in the object with color. This is useful for things that are more than simply a line or a dot. Color colors the object. This outlines those items that can also be filled and colors lines and dots. p = position_dodge(width = .9) ggplot(summed_data, aes(x = dep2, y = sed, group = asthma)) + geom_bar(aes(fill = asthma, color = asthma), stat = &quot;identity&quot;, position = p, alpha = .8) + geom_errorbar(aes(ymin = sed - s_se, ymax = sed + s_se, color = asthma), position = p, width = .3) + scale_color_manual(values = c(&quot;dodgerblue4&quot;, &quot;chartreuse4&quot;)) + ## controls the color of the error bars scale_fill_manual(values = c(&quot;aliceblue&quot;, &quot;beige&quot;)) Just so you are aware: aliceblue is a lightblue beige is a light green dodgerblue4 is a dark blue chartreuse4 is a dark green So the fill colors are light and the color colors are dark in this example. You, of course, can do whatever you want color-wise. I’m a fan of this style though so we will keep it for now. These same functions can be used on the other plots as well. Feel free to give them a try. As for the book, we’ll move on to the next section: Themes. Themes Using the plot we just made–the bar plot–we will show how theme options work. There are several built in themes that change many aspects of the plot (e.g., theme_bw(), theme_classic(), theme_minimal()). There are many more if you download the ggthemes package. Fairly simply you can create plots similar to those in newspapers and magazines. First, we are going to save the plot to simply show the different theming options. p = position_dodge(width = .9) p1 = ggplot(summed_data, aes(x = dep2, y = sed, group = asthma)) + geom_bar(aes(fill = asthma, color = asthma), stat = &quot;identity&quot;, position = p, alpha = .8) + geom_errorbar(aes(ymin = sed - s_se, ymax = sed + s_se, color = asthma), position = p, width = .3) + scale_color_manual(values = c(&quot;dodgerblue4&quot;, &quot;chartreuse4&quot;)) + ## controls the color of the error bars scale_fill_manual(values = c(&quot;aliceblue&quot;, &quot;beige&quot;)) Theme Black and White p1 + theme_bw() Theme Classic p1 + theme_classic() Theme Minimal p1 + theme_minimal() Theme Economist (from ggthemes) library(ggthemes) p1 + theme_economist() Theme FiveThirtyEight (from ggthemes) p1 + theme_fivethirtyeight() Theme Tufte (from ggthemes) p1 + theme_tufte() Theme Stata (from ggthemes) p1 + theme_stata() Your Own Theme There are many more but you get the idea. In addition to the built in themes, you can use the theme() function and make your own adjustments. There are many options so we will just introduce the idea. p1 + theme(legend.position = &quot;bottom&quot;, ## puts legend at the bottom of figure legend.background = element_rect(color = &quot;lightgrey&quot;), ## outlines legend panel.background = element_rect(fill = &quot;grey99&quot;, ## fills the plot with a very light grey color = &quot;grey70&quot;), ## light border around plot text = element_text(family = &quot;Times&quot;)) ## all text in plot is now Times There are many more options but essentially if there is something you want to change, you probably can. Labels and Titles Using our last plot, we will also want to add good labels and/or titles. p1 + theme(legend.position = &quot;bottom&quot;, legend.background = element_rect(color = &quot;lightgrey&quot;), panel.background = element_rect(fill = &quot;grey99&quot;, color = &quot;grey70&quot;), text = element_text(family = &quot;Times&quot;)) + labs(y = &quot;Sedentary Behavior (Minutes)&quot;, x = &quot;Depression (1 = Depressed)&quot;, title = &quot;Comparison of Sedentary Behavior&quot;, subtitle = &quot;across Depression and Asthma&quot;) Facetting Facetting is very useful when trying to compare more than three variables at a time or you cannot use color or shading. It is often useful and beautiful. Facetting splits the data based on some grouping variable (e.g., asthma) to highlight differences in the relationship. p1 + theme(legend.position = &quot;bottom&quot;, legend.background = element_rect(color = &quot;lightgrey&quot;), panel.background = element_rect(fill = &quot;grey99&quot;, color = &quot;grey70&quot;), text = element_text(family = &quot;Times&quot;)) + labs(y = &quot;Sedentary Behavior (Minutes)&quot;, x = &quot;Depression (1 = Depressed)&quot;, title = &quot;Comparison of Sedentary Behavior&quot;, subtitle = &quot;across Depression and Asthma&quot;) + facet_grid(~asthma) You can facet by more than one variable and it will create separate panels for each combination of the facetting variables. Conclusions This was a quick demonstration of plotting with ggplot2. There is so much more you can do. However, in the end, exploring and communicating the data through plots is simply something you need to practice. With time, you can a priori picture the types of plots that will highlight things in your data, the ways you can adjust it, and how you need to manipulate your data to make it plot ready. Be patient and have fun trying things. In my experience, almost anytime I think, “Can R do this?”, it can, so try to do cool stuff and you’ll probably find that you can. "],
["chapter-10-where-to-go-from-here-and-common-pitfalls.html", "Chapter 10: Where to Go from Here and Common Pitfalls Common Pitfalls Quiz Goodbye and Good Luck", " Chapter 10: Where to Go from Here and Common Pitfalls “The journey of a thousand miles begins with one step.” — Lao Tzu There are many resources that can aid in developing your R skills from here. We have introduced the basics of R, helping you take a few steps on your journey of understanding R. We have focused on the ones that are most important for researchers in the health, behavioral, and social sciences. Since this has been a primer, we hope that you will continue your learning of R via the various sources available at little to no cost. Just like this book, many R books are available online as well as in print. This allows you to explore and learn online at your own pace without having to buy a bunch of books or other resources. Below, we list a handful of R references that we have found to be useful: R for Data Science by Hadley Wickham Efficient Programming in R … The R Cookbook … Common Pitfalls To end, we wanted to highlight some pitfalls that can plague any beginner to R. We list a few that we’ve encountered, although others surely exist. Document your work. Don’t override objects unless it is on purpose. Changing objects can be hard to keep track of in bigger projects. Don’t shy away from asking questions. R is very flexible and, although this can make it overwhelming to master, there are people who have figured out easy ways to do complex stuff. Plan out the steps of your data manipulation and analyses. A few minutes of planning can help you not get lost in the technology and lose sight of the goal. Understand the statistics before throughing data in the model. Do exploratory data analysis (EDA) to understand your data. R is made for this so use it. Otherwise, your model may be completely wrong and have many violated assumptions. Quiz As a final note, we thought we would give you a quiz to test your memory of the topics we’ve covered. Don’t worry; no pressure to get them all. We’ve included some tougher ones. Regardless of how well you do, we hope you’ll continue improving in your R programming skills. Question 1 If the following code were part of your script would you: scream in fear be as proud as could be neither; I would fix it neither; it works but it isn’t pretty it is pretty and functional df &lt;- df + mutate(newvar = ifelse(oldvar == 1, 1, 0)) If it is broken, how would you fix it? Question 2 Goodbye and Good Luck I hope this has been a useful primer to get you into R. If you still feel rusty, feel free to go through the book again or look at other online resources. R is very flexible and can ease the data and analysis burden of research. Implement good practices and your work will become easier to track, easier to document, and easier to communicate. Good luck on your journey using R in your research! "]
]
