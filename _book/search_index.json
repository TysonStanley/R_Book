[
["index.html", "Rstats for Researchers Preface Part I Part II Part III Download R and RStudio", " Rstats for Researchers Tyson S. Barrett 2017-01-02 Preface “If I have seen further, it is by standing on the shoulders of giants.” — Isaac Newton, circa 1676 Science. It is built on replication and construction. Once an idea is established and well replicated, the next steps are to build on to it. We try to build from a foundation established by others. It should also be how we analyze our data, not only in methodology but also in software. Lucky for us, R is how we do just that. This book is for beginners in R; especially those in health, behavioral and social sciences. R is wonderfully unique. It is an open source project and improvements—known as packages—are being made by smart individuals across the globe. We’ll introduce you to many ways in which R can be used in your work. You’ll find that it can help in all facets of your data analysis and communication, while improving your replicability. In the long run, taking some time to learn a knew tool will save you time, energy, and probably most importantly, frustration. When a researcher is frustrated, it becomes so easy to overlook important features. We will quickly, and succinctly, introduce the newest, easiest, and most understandable ways of working with your data. To do this, we will have three main parts: 1) working with and simple analyses of your data, 2) modeling your data, and 3) more advanced techniques to help your workflow. Part I Chapter 1: Introduces the basics of the language Chapter 2: Manipulate Your Data (reshape, subset, join) Chapter 3: Understanding your data (summary statistics, ggplot2) Part II Chapter 4: Basic Analyses (ANOVA, Linear Regression) Chapter 5: Generalized Linear Models Chapter 6: Mulilevel Modeling Chapter 7: Other Modeling Techniques Part III Chapter 8: Advanced data manipulation Chapter 9: Advanced plotting Chapter 10: Where to go from here At the end of the book, you should be able to: 1) use R to perform your data manipulation and data analyses and 2) understand online helps (e.g. www.stackoverflow.com, www.r-bloggers.com) so your potential in R becomes nearly limitless. Download R and RStudio To begin, you will need to download the R software www.r-project.org and then the RStudio software www.rstudio.com. R is the brains and RStudio1 is an “IDE” (something that helps us work with R much more easily). Once both are installed (helps on installing the software can be found on www.rstudio.com, www.r-bloggers.com, and www.statmethods.net) you are good to go. The remainder of the book will be about actually using it. Enjoy!2 Get the free version of Rstudio. Believe me, it doesn’t feel like it should be free software.↩ Note that to return to Tyson’s blog, you can click here↩ "],
["chapter-1-the-basics.html", "Chapter 1: The Basics Objects, Data Types and Functions Importing Data Saving Data Conclusions", " Chapter 1: The Basics Let’s jump right into it. R is an open source statistical software made by statisticians. This means it generally speaks the language of statistics. This is very helpful when it comes running analyses but can be confusing when starting to understand the code. Early Advice: Don’t get overwhelmed. It may feel like there is a lot to learn, but taking things one at a time will work surprisingly quickly. I’ve designed this book to discuss what you need to know from the beginning. Other topics that are not discussed are things you can learn later and do not need to be of your immediate concern. Because learning code is best through experience, we’ll start with a simple walk-through of data types, functions, and objects. Objects, Data Types and Functions Objects R uses objects and operators. An object, just like in the physical world, is something you can do things with. In the real world, we have objects that we use regularly. For example, we have chairs. Chairs are great for some things (sitting, sleeping) and horrible at others (driving, flying). Similarly, in R each type of object is useful for certain things. The data types we just discussed are certain types of objects. The data frames objects are a very good way to store data in an easily analyzable format. Because this is so analogous to the real world, it becomes quite natural to work with. You can have many objects in memory, which allows flexbility in analyzing many different things simply within a single R session. For your work, the first thing you work with will be data in various forms. Below, we explain the different data types and how they can combine into what is known as a data.frame. Data Types In R there are three main data types that you’ll work with in research: numeric factor character The first, numeric, is just that: numbers. In R, you can make a numeric variable with the code below: x &lt;- c(10.1, 2.1, 4.6, 2.3, 8.9) The c() is a function 3 that stands for “concatenate” which basically glues the values inside the paratheses together into one. We use &lt;- to put it into x. So in this case, x (which we could have named anything) is saving those values so we can work with them4. A factor variable is a categorical variable (i.e., only a limited number of options exist). For example, race/ethnicity is a factor variable. race &lt;- c(1, 3, 2, 1, 1, 2, 1, 3, 4, 2) The code above actually produces a numeric vector (since it was only provided numbers). We can quickly tell R that it is indeed supposed to be a factor. race &lt;- factor(race, labels = c(&quot;white&quot;, &quot;black&quot;, &quot;hispanic&quot;, &quot;asian&quot;)) The factor() function tells R that the first thing race is actually a factor. The additional argument labels tells R what each of the values means. If we print out race we see that R has replaced the numeric values with the labels. race ## [1] white hispanic black white white black white ## [8] hispanic asian black ## Levels: white black hispanic asian Finally, and maybe less relevantly, there are character variables. These are words (known as strings). In research this is often where subjects give open responses to a question. ch &lt;- c(&quot;I think this is great.&quot;, &quot;I would suggest you learn R.&quot;, &quot;You seem quite smart.&quot;) When we combine multiple variables into one, we create a data.frame. A data frame is like a spreadsheet table, like the ones you have probably seen in excel and SPSS. Here’s a simple example: df &lt;- data.frame(&quot;A&quot;=c(1,2,1,4,3), &quot;B&quot;=c(1.4,2.1,4.6,2.0,8.2), &quot;C&quot;=c(0,0,1,1,1)) df ## A B C ## 1 1 1.4 0 ## 2 2 2.1 0 ## 3 1 4.6 1 ## 4 4 2.0 1 ## 5 3 8.2 1 We can do quite a bit with the data.frame that we called df5. Once again, we could have called this data frame anything, although I recommend short names. If “A” and “C” are factors we can tell R by: df$A &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df$C &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) In the above code, the $ reaches into df to grab a variable (or column). The following code does the exact same thing: df[[&quot;A&quot;]] &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df[[&quot;C&quot;]] &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) and so is the following: df[, &quot;A&quot;] &lt;- factor(df$A, labels = c(&quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) df[, &quot;C&quot;] &lt;- factor(df$C, labels = c(&quot;Male&quot;, &quot;Female&quot;)) df[[&quot;A&quot;]] grabs the A variable just like df$A. The last example shows that we can grab both columns and rows. In df[, &quot;C&quot;] we have a spot just a head of the comma. It works like this: df[rows, columns]. So we could specifically grab certain rows and certain columns. df[1:3, &quot;A&quot;] df[1:3, 1] Both lines of the above code grabs rows 1 thorugh 3 and column “A”. Finally, we can combine the c() function to grab different rows and columns. To grab rows 1 and 5 and columns “B” and “C” you can do the following: df[c(1,5), c(&quot;B&quot;, &quot;C&quot;)] We may also want to get more information about the data frame before we do any subsetting. There are a few nice functions to get information that can help us know what we should do next with our data. ## Get the variable names names(df) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; ## Know what type of variable it is class(df$A) ## [1] &quot;factor&quot; ## Get quick summary statistics for each variable summary(df) ## A B C ## level1:2 Min. :1.40 Male :2 ## level2:1 1st Qu.:2.00 Female:3 ## level3:1 Median :2.10 ## level4:1 Mean :3.66 ## 3rd Qu.:4.60 ## Max. :8.20 ## Get the first 10 columns of your data head(df, n=10) ## A B C ## 1 level1 1.4 Male ## 2 level2 2.1 Male ## 3 level1 4.6 Female ## 4 level4 2.0 Female ## 5 level3 8.2 Female We admit that the last one is a bit pointless since our data frame is only a few lines long. However, these functions can give you quick information about your data with hardly any effort on your part. Functions Earlier we mentioned that c() was a “function.” Functions are how we do things we our data. There are probably hundreds of thousands of functions at your reach. In fact, you can create your own! We’ll discuss that more later. For now, know that each function has a name (the function name of c() is “c”), arguments, and output of some sort. Arguments are the information that you provide the function (e.g. we gave c() a bunch of numbers). Output from a function varies to a massive degree but, in general, the output is what you are using the function for (e.g., for c() we wanted to create a vector—a variable—of data). At any point, by typing: ?functionname we get information in the “Help” window providing the arguments and output. Below we show you several functions for both importing and saving data. Note that each have a name, arguments, and output. Importing Data Most of the time you’ll want to import data into R rather than manually entering it line by line, variable by variable. There are some built in ways to import many delimited6 data types (e.g. comma delimited–also called a CSV, tab delimited, space delimited). Other packages7 have been developed to help with this as well. The first, if it is an R data file in the form .rda or .RData simply use: load(&quot;file.rda&quot;) Note that you don’t assign this to a name such as df. Instead, it loads whatever R objects were saved to it. Delimited Files Most delimited files are saved as .csv, .txt, or .dat. As long as you know the delimiter, this process is easy. df &lt;- read.table(&quot;file.csv&quot;, sep = &quot;,&quot;, header=TRUE) ## for csv df &lt;- read.table(&quot;file.txt&quot;, sep = &quot;\\t&quot;, header=TRUE) ## for tab delimited df &lt;- read.table(&quot;file.txt&quot;, sep = &quot; &quot;, header=TRUE) ## for space delimited The argument sep tells the function what kind of delimiter the data has and header tells R if the first row contains the variable names (you can change it to FALSE if the first row isn’t). Note that at the end of the lines you see that I left a comment using #. I used two for stylistic purposes but only one is necessary. Anything after a # is not read by the computer; it’s just for us humans. Heads up! Note that unless you are using the load function, you need to assign what is being read in to a name. In the examples, all were called df. In real life, you won’t run a bunch of different read functions to the same name because only the last one run would be saved (the others would be written over). However, if you have multiple data files to import you can assign them to different names and later merge them. Merging, also called joining, is something we’ll discuss in the next chapter. Other Data Formats Data from other statistical software such as SAS, SPSS, or Stata are also easy to get into R. We will use two powerful packages: haven foreign To install, simply run: install.packages(&quot;packagename&quot;) This only needs to be run once on a computer. Then, to use it in a single R session (i.e. from when you open R to when you close it) run: library(packagename) Using these packages, I will show you simple ways to bring your data in from other formats. library(haven) df &lt;- read_dta(&quot;file.dta&quot;) ## for Stata data df &lt;- read_spss(&quot;file.sav&quot;) ## for SPSS data df &lt;- read_sas(&quot;file.sas7bdat&quot;) ## for this type of SAS file library(foreign) df &lt;- read.xport(&quot;file.xpt&quot;) ## for export SAS files If you have another type of data file to import, online helps found on sites like www.stackoverflow.com and www.r-bloggers.com often have the solution. Saving Data Finally, there are many ways to save data. Most of the read... functions have a corresponding write... function. write.table(df, file=&quot;file.csv&quot;, sep = &quot;,&quot;) ## to create a CSV data file R automatically saves missing data as NA since that is what it is in R. But often when we write a CSV file, we might want it as blank or some other value. If that’s the case, we can add another argument na = &quot; &quot; after the sep argument. If you ever have questions about the specific arguments that a certain function has, you can simply run: ?functionname So, if you were curious about the different arguments in write.table simply run: ?write.table. In the pane with the files, plots, packages, etc. a document will show up to give you more informaton. Conclusions R is designed to be flexible and do just about anything with data that you’ll need to do as a researcher. With this chapter under your belt, you can now read basic R code, import and save your data. The next chapter will introduce the “tidyverse” of methods that can help you join, reshape, summarize, group, and much more. R is all about functions. Functions tell R what to do with the data. You’ll see many more examples throughout the book.↩ This is a great feature of R. It is called “object oriented” which basically means R creates objects to work with. I discuss this more in 1.2.↩ I used this name since df is common in online helps and other resources.↩ The delimiter is what separates the pieces of data.↩ A package is an extension to R that gives you more functions–abilities–to work with data. Anyone can write a package, although to get it on the Comprehensive R Archive Network (CRAN) it needs to be vetted to a large degree. In fact, after some practice, you could write a package to help you more easily do your work.↩ "],
["chapter-2-manipulating-your-data.html", "Chapter 2: Manipulating Your Data Tidy Methods Piping Select and Filter Grouping and Summarizing Reshaping Joining (merging)", " Chapter 2: Manipulating Your Data In order to manipulate your data in the cleanest, most up-to-date manner, we are going to be using the “tidyverse” group of methods. The tidyverse8 is a group of packages9 that provide a simple syntax that can do many basic (and complex) data manipulating. The group of packages can be downloaded via: install.packages(&quot;tidyverse&quot;) After downloading it, simply use: library(tidyverse) Note that when we loaded tidyverse it loaded 6 packages and told you of “conflicts”. These conflicts are where two or more loaded packages have the same function in them. The last loaded package is the one that R will use by default. For example, if we loaded two packages–awesome and amazing–and both had the function–make_really_great and we loaded awesome and then amazing as so: library(awesome) library(amazing) R will automatically use the function from amazing. We can still access the awesome version of the function (because even though the name is the same, they won’t necessarily do the same things for you). We can do this by: awesome::make_really_great(arg) That’s a bit of an aside, but know that you can always get at a function even if it is “masked” from your current session. Tidy Methods I’m introducing this to you for a couple reasons. It simplifies the code and makes the code more readable. As the saying goes, there are always at least two collaborators on any project: you and future you. It is the cutting edge. The most influential individuals in the R world, including the makers and maintainers of RStudio, use these methods and syntax. The majority of what you’ll need to do with data as a researcher will be covered by these functions. The goal of these functions is to help tidy up your data. Tidy data is based on columns being variables and rows being observations. It is the form that data needs to be in to analyze it, whether that analysis is by graphing, modeling, or other means. There are several methods that help create tidy data: Piping Selecting and Filtering Grouping and Summarizing Reshaping Joining (merging) To help illustrate each aspect, we are going to use real data from the National Health and Nutrition Examiniation Survey (NHANES). I’ve provided this data at https://tysonstanley.github.io/assets/Data/NHANES.zip. I’ve cleaned it up somewhat already. Let’s quickly read that data in so we can use it throughout the remainder of this chapter. First, we will set our working directory with setwd. This tells R where to look for files, including your data files. My specific file location is below so you will need to adjust it to wherever you saved the NHANES data. setwd(&quot;~/Dropbox/GitHub/blog_rstats/assets/Data/&quot;) library(foreign) dem_df &lt;- read.xport(&quot;NHANES_demographics_11.xpt&quot;) med_df &lt;- read.xport(&quot;NHANES_MedHeath_11.xpt&quot;) men_df &lt;- read.xport(&quot;NHANES_MentHealth_11.xpt&quot;) act_df &lt;- read.xport(&quot;NHANES_PhysActivity_11.xpt&quot;) Now we have four separate, but related, data sets in memory: dem_df containing demographic information med_df containing medical health information men_df containing mental health information act_df containing activity level information Since all of them have all-cap variable names, we are going to quickly change this with a little trick: names(dem_df) &lt;- tolower(names(dem_df)) names(med_df) &lt;- tolower(names(med_df)) names(men_df) &lt;- tolower(names(men_df)) names(act_df) &lt;- tolower(names(act_df)) This takes the names of the data frame (on the right hand side), changes them to lower case and then reassigns them to the names of the data frame.10 We will now go through each aspect of the tidy way of working with data using these four data sets. Piping Let’s introduce a few major themes in this tidyverse. First, the pipe operator – %&gt;%. It helps simplify the code and makes things more readable. It takes what is on the left hand side and puts it in the right hand side’s function. dem_df %&gt;% summary So the above code takes the data frame df and puts it into the summary function. This does the same thing as summary(df). In this simple case, it doesn’t really make the code more readable, but in more complex situations it can really help. In the following sections you will see how and where this type of coding is helpful. Select and Filter We often want to subset our data in some way before we do many of our analyses. This can make our cognitive load of the data much lighter but it can also be very important in the actual analyses. The code below show the two main ways to subset your data: 1) selecting variables and 2) filtering observations. To select three variables (i.e. gender [“riagendr”], age [“ridageyr”], and ethnicity [“ridreth1”]) we: selected_dem &lt;- dem_df %&gt;% select(riagendr, ridageyr, ridreth1) Now, selected_dem has three variables and all the observations. We can also filter (i.e. take out observations we don’t want): filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1) Since when riagendr == 1 the individual is male, filtered_dem only has male participants. We can add multiple filtering options as well: filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1 &amp; ridageyr &gt; 16) We now have only males that are older than 16 years old. We used &amp; to say we want both conditions to be met. Alternatively, we could: filtered_dem &lt;- dem_df %&gt;% filter(riagendr == 1 | ridageyr &gt; 16) which, using | we are saying we want males or individuals older than 16. In other words, if either are met, that observation will be kept. Finally, we can do all of these in one step: filtered_dem &lt;- dem_df %&gt;% select(riagendr, ridageyr, ridreth1) %&gt;% filter(riagendr == 1 &amp; ridageyr &gt; 16) where we use two %&gt;% operators to grab dem_df, select the three variables, and then filter the rows that we want. Grouping and Summarizing A major aspect of analysis is comparing groups. Lucky for us, this is very simple in R. I call it the three step summary: Data Group by Summarize ## Our Grouping Variable as a factor dem_df$citizen &lt;- factor(dem_df$dmdcitzn) ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n()) ## 3. Summarize ## # A tibble: 4 × 2 ## citizen N ## &lt;fctr&gt; &lt;int&gt; ## 1 1 8685 ## 2 2 1040 ## 3 7 26 ## 4 NA 5 The output is very informative. The first column is the grouping variable and the second is the N (number of individuals) by group. We can quickly see that there are four levels, currently, to the citizen variable. After some reading of the documentation we see that 1 = Citizen and 2 = Not a Citizen. A value of 7 it turns out is a placeholder value for missing. And finally we have an NA category. It’s unlikely that we want those to be included in any analyses, unless we are particularly interested in the missingness on this variable. So let’s do some simple cleaning to get this where we want it. To do this, we will use the furniture package. install.packages(&quot;furniture&quot;) library(furniture) dem_df$citizen &lt;- washer(dem_df$citizen, 7) ## Changes all 7&#39;s to NA&#39;s dem_df$citizen &lt;- washer(dem_df$citizen, 2, value=0) ## Changes all 2&#39;s to 0&#39;s Now, our citizen variable is cleaned, with 0 meaning not a citizen and 1 meaning citizen. Let’s rerun the code from above with the three step summary: ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n()) ## 3. Summarize ## # A tibble: 3 × 2 ## citizen N ## &lt;chr&gt; &lt;int&gt; ## 1 0 1040 ## 2 1 8685 ## 3 &lt;NA&gt; 31 Its clear that the majority of the subjects are citizens. We can also check multiple variables at the same time, just separating them with a comma in the summarize function. ## Three step summary: dem_df %&gt;% ## 1. Data group_by(citizen) %&gt;% ## 2. Group by summarize(N = n(), ## 3. Summarize Age = mean(ridageyr, na.rm=TRUE)) ## # A tibble: 3 × 3 ## citizen N Age ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 0 1040 37.31635 ## 2 1 8685 30.66252 ## 3 &lt;NA&gt; 31 40.35484 We used the n() function (which gives us counts) and the mean() function which, shockingly, gives us the mean. Note that if there are NA’s in the variable, the mean (and most other functions like it) will give the result NA. To have R ignore these, we tell the mean function to remove the NA’s when you compute this using na.rm=TRUE. This pattern of grouping and summarizing is something that will follow us throughout the book. It’s a great way to get to know your data well and to make decisions on what to do next with your data. Reshaping This is a big part of working with data. Unfortunately, it is also a difficult topic to understand without much practice at it. In general, two data formats exist: Wide form Long form Only when the data is cross-sectional and each individual is a row does this distinction not matter much. Otherwise, if there are multiple measures per individual, or there are multiple individuals per cluster, the distinction between wide and long is very important for modeling and visualization. Wide Form Wide form generally has one unit (i.e. individual) per row. This generally looks like: ## ID Var_Time1 Var_Time2 ## 1 1 1.2650781 0.55002619 ## 2 2 0.3768348 0.29030527 ## 3 3 -0.3429598 0.12158063 ## 4 4 0.1180290 0.68876956 ## 5 5 -0.9262769 0.43087814 ## 6 6 0.7942114 0.62699073 ## 7 7 1.6658005 0.93071360 ## 8 8 1.7667322 0.11225902 ## 9 9 0.4565165 0.06843331 ## 10 10 0.6855096 0.04501332 Notice that each row has a unique ID. This format is common in the ANOVA family of analyses. These can be used when there are set time points that the individual is measured and each individual has the same number of time points. This is not always reasonable, but when it is, wide format works just fine. However, when these conditions don’t hold, mixed effects modeling (i.e. multilevel modeling, hierarchical linear modeling) is particularly useful. In order to do mixed effects modeling, long format is required. Long Form In contrast, long format has the lowest nested unit as a single row. This means that a single ID can span multiple rows, usually with a unique time point for each row as so: ## ID Time Var ## 1 1 1 0.7985936 ## 2 1 2 0.4683714 ## 3 1 3 0.5610453 ## 4 1 4 0.8612671 ## 5 2 1 0.2848520 ## 6 2 2 0.3947850 ## 7 3 1 0.7231716 ## 8 3 2 0.9880335 ## 9 3 3 0.6843212 Notice that a single ID spans multiple columns and that each row has only one time point. Here, time is nested within individuals making it the lowest unit. Therefore, each row corresponds to a single time point. Generally, this is the format we want for most modeling techniques and most visualizations. Joining (merging) The final topic in the chapter is joining data sets This is common when we are using bigger We currently have 4 data sets that have mostly the same people in them but with different variables. One tells us about the demographics; another gives us information on mental health. We may have questions that ask whether a demographic characteristics is related to a mental health factor. This means we need to merge, or join, our data sets.11 When we merge a data set, we combine them based on some ID variable(s). Here, this is simple since each individual is given a unique identifier in the variable seqn. Within the dplyr package there are four main joining functions: inner_join, left_join, right_join and full_join. Each join combines the data in slightly different ways. Let’s first load dplyr: library(dplyr) Inner Join Here, only those individuals that are in both data sets that you are combining will remain. So if person “A” is in data set 1 and not in data set 2 then he/she will not be included. inner_join(df1, df2, by=&quot;IDvariable&quot;) Left or Right Join This is similar to inner join but now if the individual is in data set 1 then left_join will keep them even if they aren’t in data set 2. right_join means if they are in data set 2 then they will be kept whether or not they are in data set 1. left_join(df1, df2, by=&quot;IDvariable&quot;) ## keeps all in df1 right_join(df1, df2, by=&quot;IDvariable&quot;) ## keeps all in df2 Full Join This one simply keeps all individuals that are in either data set 1 or data set 2. full_join(df1, df2, by=&quot;IDvariable&quot;) Each of the left, right and full joins will have missing values placed in the variables where that individual wasn’t found. For example, if person “A” was not in df2, then in a full join they would have missing values in the df1 variables. For our NHANES example, we will use full_join to get all the data sets together. Note that in the code below we do all the joining in the same overall step. df &lt;- dem_df %&gt;% full_join(med_df, by=&quot;seqn&quot;) %&gt;% full_join(men_df, by=&quot;seqn&quot;) %&gt;% full_join(act_df, by=&quot;seqn&quot;) So now df is the the joined data set of all four. We started with dem_df joined it with med_df by seqn then joined that joined data set with men_df by seqn, and so on. For analyses in the next chapter, we will use this new df object that is the combination of all the data sets that we had before. Hadley Wickham (2016). tidyverse: Easily Install and Load ‘Tidyverse’ Packages. R package version 1.0.0. https://CRAN.R-project.org/package=tidyverse↩ Remember, a package is an extension to R that gives you more functions that you can easily load into R.↩ Note that these are not particularly helpful names, but they are the names provided in the original data source. If you have questions about the data, visit http://wwwn.cdc.gov/Nchs/Nhanes/Search/Nhanes11_12.aspx.↩ Note that this is different than adding new rows but not new variables. Merging requires that we have at least some overlap of individuals in both data sets.↩ "],
["chapter-3-understanding-and-describing-your-data.html", "Chapter 3: Understanding and Describing Your Data Descriptive Statistics Visualizations", " Chapter 3: Understanding and Describing Your Data We are going to take what we’ve learned from the previous two chapters and use them together to have simple but powerful ways to understand your data. This chapter will be broken down into: Descriptive Statistics Visualizations The two go hand-in-hand in understanding what is happening in your data. We are often most interested in three things when exploring our data: understanding distributions, understanding relationships, and looking for outliers or errors. Descriptive Statistics Several methods of discovering descriptives in a succinct way have been developed for R. My favorite (full disclosure: it is one that I made so I may be biased) is the table1 function in the furniture package. This function has been designed to be simple and complete. It produces a well-formatted table that you can easily export and use as a table in a report or article.12 We’ll first create a ficticious data set and we’ll show the basic build of table1. library(furniture) df &lt;- data.frame(&quot;A&quot;=c(1,2,1,4,3,NA), &quot;B&quot;=c(1.4,2.1,4.6,2.0,NA,3.4), &quot;C&quot;=c(0,0,1,1,1,1), &quot;D&quot;=rnorm(6)) table1(df, A, B, C, D) ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## 2.20 (1.30) ## B ## 2.70 (1.29) ## C ## 0.67 (0.52) ## D ## -0.29 (1.15) ## |==============================| This quickly gives you means and standard deviations (or counts and percentages if there were categorical variables). We could have also used the pipe operator here if we wanted via: df %&gt;% table1(A, B, C, D) ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## 2.20 (1.30) ## B ## 2.70 (1.29) ## C ## 0.67 (0.52) ## D ## -0.29 (1.15) ## |==============================| It turns out, for we want “A” and “C” to be factors. df$A &lt;- factor(df$A, labels=c(&quot;cat1&quot;, &quot;cat2&quot;, &quot;cat3&quot;, &quot;cat4&quot;)) df$C &lt;- factor(df$C, labels=c(&quot;male&quot;, &quot;female&quot;)) table1(df, A, B, C, D) ## Warning in table1(df, A, B, C, D): Tests are less robust to non-normality ## if N in any group is less than 20 ## Warning in table1(df, A, B, C, D): Tests are less robust to non-normality ## if N in any group is less than 20 ## ## |==============================| ## Mean/Count (SD/%) ## Observations 6 ## A ## cat1 2 (40%) ## cat2 1 (20%) ## cat3 1 (20%) ## cat4 1 (20%) ## B ## 2.70 (1.29) ## C ## male 2 (33.3%) ## female 4 (66.7%) ## D ## -0.29 (1.15) ## |==============================| So now we see the counts and percentages for the factor variables. But now we can take a step further and look for relationships. The code below shows the means/standard devaitions or counts/percentages by a grouping variable–in this case, C. table1(df, A, B, D, splitby = ~C) ## Warning in table1(df, A, B, D, splitby = ~C): Tests are less robust to non- ## normality if N in any group is less than 20 ## Warning in table1(df, A, B, D, splitby = ~C): Tests are less robust to non- ## normality if N in any group is less than 20 ## ## |======================================| ## male female ## Observations 2 4 ## A ## cat1 1 (50%) 1 (33.3%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (33.3%) ## cat4 0 (0%) 1 (33.3%) ## B ## 1.75 (0.49) 3.33 (1.30) ## D ## -0.03 (2.16) -0.41 (0.77) ## |======================================| We can also test for differences by group as well (although this is not particularly good with a sample size of 5). It produces a warning since the \\(\\chi^2\\) approximation is not accurate with cells this small. table1(df, A, B, D, splitby = ~C, test=TRUE) ## Warning in chisq.test(d$split, d[, i]): Chi-squared approximation may be ## incorrect ## Warning in table1(df, A, B, D, splitby = ~C, test = TRUE): Tests are less ## robust to non-normality if N in any group is less than 20 ## Warning in table1(df, A, B, D, splitby = ~C, test = TRUE): Tests are less ## robust to non-normality if N in any group is less than 20 ## ## |==============================================| ## male female P-Value ## Observations 2 4 ## A 0.405 ## cat1 1 (50%) 1 (33.3%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (33.3%) ## cat4 0 (0%) 1 (33.3%) ## B 0.162 ## 1.75 (0.49) 3.33 (1.30) ## D 0.843 ## -0.03 (2.16) -0.41 (0.77) ## |==============================================| Finally, we can include missingness in the table for factors. table1(df, A, B, D, splitby = ~C, test=TRUE, NAkeep = TRUE) ## Warning in chisq.test(d$split, d[, i]): Chi-squared approximation may be ## incorrect ## Warning in table1(df, A, B, D, splitby = ~C, test = TRUE, NAkeep = TRUE): ## Tests are less robust to non-normality if N in any group is less than 20 ## Warning in table1(df, A, B, D, splitby = ~C, test = TRUE, NAkeep = TRUE): ## Tests are less robust to non-normality if N in any group is less than 20 ## ## |==============================================| ## male female P-Value ## Observations 2 4 ## A 0.405 ## cat1 1 (50%) 1 (25%) ## cat2 1 (50%) 0 (0%) ## cat3 0 (0%) 1 (25%) ## cat4 0 (0%) 1 (25%) ## NA 0 (0%) 1 (25%) ## B 0.162 ## 1.75 (0.49) 3.33 (1.30) ## D 0.843 ## -0.03 (2.16) -0.41 (0.77) ## |==============================================| So with three or four short lines of code we can get a good idea about variables that may be related to the grouping variable and any missingness in the factor variables. There’s much more you can do with table1 and there are vignettes and tutorials available to learn more.13 Other quick descriptive functions exist; here are a few of them. summary(df) ## descriptives for each variable in the data library(psych) ## install first describe(df) ## produces summary statistics for continuous variables library(Hmisc) ## install first Hmisc::describe(df) ## gives summary for each variable separately Visualizations Understanding your data, in my experience, generally requires visualizations. If we are going to use a model of some sort, understanding the distributions and relationships beforehand are very helpful in interpreting the model and catching errors in the data. Also finding any outliers or errors that could be highly influencing the modeling should be understood beforehand. For simple but appealing visualizations we are going to be using ggplot2. This package is used to produce professional level plots for many journalism organizations (e.g. five-thrity-eight). These plots are quickly presentation quality and can be used to impress your boss, your advisor, or your friends. 0.0.1 ggplot2 This package has a straight-forward syntax. It is built by adding layers to the plot. library(ggplot2) ## first install using install.packages(&quot;ggplot2&quot;) First, we have a nice qplot function that is short for “quick plot.” It quickly decides what kind of plot is useful given the data and variables you provide. qplot(df$A) ## Makes a simple histogram qplot(df$D, df$B) ## Makes a scatterplot ## Warning: Removed 1 rows containing missing values (geom_point). For a bit more control over the plot, you can use the ggplot function. The first piece is the ggplot piece. From there, we add layers. These layers generally start with geom_ then have the type of plot. Below, we start with telling ggplot the basics of the plot and then build a boxplot. The x-axis is the variable “C” and the y-axis is the variable “D” and then we color it by variable “C” as well. ggplot(df, aes(x=C, y=D)) + geom_boxplot(aes(color = C)) Here’s a few more examples: ggplot(df, aes(x=C)) + geom_bar(stat=&quot;count&quot;, aes(fill = C)) ggplot(df, aes(x=B, y=D)) + geom_point(aes(color = C)) ## Warning: Removed 1 rows containing missing values (geom_point). Note that the warning that says it removed a row is because we had a missing value in “C”. We are going to make the first one again but with some aesthetic adjustments. Notice that we just added two extra lines telling ggplot2 how we want some things to look.14 ggplot(df, aes(x=C, y=D)) + geom_boxplot(aes(color = C)) + theme_bw() + scale_color_manual(values = c(&quot;dodgerblue4&quot;, &quot;coral2&quot;)) The theme_bw() makes the background white, the scale_color_manual() allows us to change the colors in the plot. You can get a good idea of how many types of plots you can do by going to http://docs.ggplot2.org/current. Almost any informative plot that you need to do as a researcher is possible with ggplot2. We will be using ggplot2 extensively in the book to help understand our data and our models as well as communicate our results. We use this code to get the data ready for the rest of the chapter. We use this code for the data for each chapter hereafter. ## Run but not shown ## Getting data ready for the examples library(foreign) library(dplyr) dem_df &lt;- read.xport(&quot;~/Box Sync/GitHub/blog_rstats/assets/Data/NHANES_demographics_11.xpt&quot;) med_df &lt;- read.xport(&quot;~/Box Sync/GitHub/blog_rstats/assets/Data/NHANES_MedHeath_11.xpt&quot;) men_df &lt;- read.xport(&quot;~/Box Sync/GitHub/blog_rstats/assets/Data/NHANES_MentHealth_11.xpt&quot;) act_df &lt;- read.xport(&quot;~/Box Sync/GitHub/blog_rstats/assets/Data/NHANES_PhysActivity_11.xpt&quot;) names(dem_df) &lt;- tolower(names(dem_df)) names(med_df) &lt;- tolower(names(med_df)) names(men_df) &lt;- tolower(names(men_df)) names(act_df) &lt;- tolower(names(act_df)) df &lt;- dem_df %&gt;% full_join(med_df, by=&quot;seqn&quot;) %&gt;% full_join(men_df, by=&quot;seqn&quot;) %&gt;% full_join(act_df, by=&quot;seqn&quot;) %&gt;% filter(complete.cases(dmdmartl)) It is called “table1” because a nice descriptive table is often found in the first table of many academic papers.↩ tysonstanley.github.io↩ This is just scratching the surface of what we can change in the plots.↩ "],
["chapter-4-basic-analyses.html", "Chapter 4: Basic Analyses ANOVA Linear Modeling When Assumptions Fail", " Chapter 4: Basic Analyses In this chapter we are going to demonstrate basic modeling in R. Lucky for us, R is built for these analyses. It is actually quite straight-forward to run these types of models and analyze the output. Not only that, but there are simple ways to compare models. We will go through the ANOVA family of analyses, the linear regression models, and look at diagnostics of each. ANOVA ANOVA stands for analysis of variance. It is a family of methods (e.g. ANCOVA, MANOVA) that all share the fact that they compare a continuous dependent variable by a grouping factor variable (and may have multiple outcomes or other covariates). \\[ Y_i = \\alpha_0 + \\alpha_1 \\text{Group}_i + e_i \\] Since the groups are compared using “effect coding,” the \\(\\alpha_0\\) is the grand mean and each of the group level means are compared to it. To run an ANOVA model, you can simply use the aov function. In the example below, we are analyzing whether family size (although not fully continuous it is still useful for the example) differs by race. df$race &lt;- factor(df$ridreth1, labels=c(&quot;MexicanAmerican&quot;, &quot;OtherHispanic&quot;, &quot;White&quot;, &quot;Black&quot;, &quot;Other&quot;)) df$famsize &lt;- as.numeric(df$dmdfmsiz) fit &lt;- aov(famsize ~ race, df) anova(fit) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 749.8 187.462 69.353 &lt; 2.2e-16 *** ## Residuals 5555 15015.3 2.703 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We make sure the variables are the right type, then we use the aov function. Inside of the function we have what is called a formula. It has the general structure: leftside ~ rightside. Generally, the left side is an outcome variable and the right side is the predictor (i.e. independent) variable. Here, we have race predicting famsize. We assign the model to the name fit which is a common way of denoting it is a model. Finally, we use the anova function to output a nice ANOVA table. In the output we see the normal ANOVA table and we can see the p-value (Pr(&gt;F)) is very, very small and thus is quite significant. We can look at how the groups relate using a box plot. We will be using some of the practice you got in Chapter 3 using ggplot2 for this. library(ggplot2) ggplot(df, aes(x=race, y=famsize)) + geom_boxplot(aes(color=race)) + scale_color_manual(guide=FALSE, values=c(&quot;dodgerblue3&quot;, &quot;coral2&quot;, &quot;chartreuse4&quot;, &quot;darkorchid&quot;, &quot;firebrick2&quot;)) + theme_bw() This immediately gives us an idea of where some differences may be occuring. It would appear that “White” and “MexicanAmerican” groups are different in family size. Assumptions We also would like to make sure the assumptions look like they are being met. In ANOVA, we want the residuals to be distributed normally, the variance of each group should be approximately the same, the groups are assumed to be randomly assigned, and the sample should be randomly selected as well. In R we can get some simple graphical checks using plot. All we provide is our ANOVA object (here it is fit). The line before it par(mfrow=c(1,2)) tells R to have two plots per row (the 1 means one row, 2 means two columns). par(mfrow=c(1,2)) plot(fit) Here, it looks like we have a problem with normality (see the Normal Q-Q plot). Those dots should approximately follow the dotted line, which is not the case. In the first plot (Residuals vs. Fitted) suggests we have approximate homoskedasticity. Linear Modeling Linear regression is nearly identical to ANOVA. In fact, a linear regression with a continuous outcome and categorical predictor is exactly the same (if we use effect coding). For example, if we run the same model but with the linear regression function lm we get the same ANOVA table. fit2 &lt;- lm(famsize ~ race, data=df) anova(fit2) ## Analysis of Variance Table ## ## Response: famsize ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## race 4 749.8 187.462 69.353 &lt; 2.2e-16 *** ## Residuals 5555 15015.3 2.703 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Surprise! It is the same as before. Here we can also use the summary function and we get the coefficients in the model as well (using dummy coding). The first level of the categorical variable is the reference group (the group that the others are compared to). We also get the intercept (in this case, the average value of the reference group). summary(fit2) ## ## Call: ## lm(formula = famsize ~ race, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.752 -1.535 -0.535 1.140 4.465 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.75185 0.07075 53.029 &lt; 2e-16 *** ## raceOtherHispanic -0.61690 0.09840 -6.269 3.90e-10 *** ## raceWhite -1.21682 0.07956 -15.294 &lt; 2e-16 *** ## raceBlack -0.89206 0.08285 -10.768 &lt; 2e-16 *** ## raceOther -0.61760 0.08867 -6.965 3.67e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.644 on 5555 degrees of freedom ## Multiple R-squared: 0.04756, Adjusted R-squared: 0.04688 ## F-statistic: 69.35 on 4 and 5555 DF, p-value: &lt; 2.2e-16 Assumptions Comparing Models Often when running linear regression, we want to compare models and see if one fits significantly better than another. We also often want to present all the models in a table to let our readers compare the models. We will demonstrate both. Compare Statistically Using the anova() function, we can compare models statistically. anova(fit, fit2) ## Analysis of Variance Table ## ## Model 1: famsize ~ race ## Model 2: famsize ~ race ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 5555 15015 ## 2 5555 15015 0 0 The anova() function works with all sorts of modeling schemes and can help in model selection. Not surprisingly, when we compared the ANOVA and the simple linear model, they are exactly the same in overall model terms (the only difference is in how the cateogrical variable is coded—either effect coding in ANOVA or dummy coding in regression). For a more interesting comparison, lets run a new model with an additional variable and then make a comparison. fit3 = lm(famsize ~ race + dmdmartl, data=df) summary(fit3) ## ## Call: ## lm(formula = famsize ~ race + dmdmartl, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8529 -1.3157 -0.5024 1.0076 6.4705 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.915115 0.072292 54.157 &lt; 2e-16 *** ## raceOtherHispanic -0.590393 0.097666 -6.045 1.59e-09 *** ## raceWhite -1.226109 0.078943 -15.532 &lt; 2e-16 *** ## raceBlack -0.857295 0.082278 -10.420 &lt; 2e-16 *** ## raceOther -0.621376 0.087978 -7.063 1.83e-12 *** ## dmdmartl -0.062217 0.006587 -9.445 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.631 on 5554 degrees of freedom ## Multiple R-squared: 0.06262, Adjusted R-squared: 0.06178 ## F-statistic: 74.2 on 5 and 5554 DF, p-value: &lt; 2.2e-16 Notice that the variable is associated with the outcome according to the t-test seen in the summary. So we would expect that fit3 is better than fit2 at explaining the outcome, which we see in the output below. anova(fit2, fit3) ## Analysis of Variance Table ## ## Model 1: famsize ~ race ## Model 2: famsize ~ race + dmdmartl ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 5555 15015 ## 2 5554 14778 1 237.36 89.207 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Compare in a Table We can also compare the models in a well-formatted table that makes many aspects easy to compare. Two main packages allow us to compare models: stargazer texreg Both provide simple functions to compare multiple models. For example, stargazer provides: library(stargazer) stargazer(fit2, fit3, type = &quot;text&quot;) ## ## ===================================================================== ## Dependent variable: ## ------------------------------------------------- ## famsize ## (1) (2) ## --------------------------------------------------------------------- ## raceOtherHispanic -0.617*** -0.590*** ## (0.098) (0.098) ## ## raceWhite -1.217*** -1.226*** ## (0.080) (0.079) ## ## raceBlack -0.892*** -0.857*** ## (0.083) (0.082) ## ## raceOther -0.618*** -0.621*** ## (0.089) (0.088) ## ## dmdmartl -0.062*** ## (0.007) ## ## Constant 3.752*** 3.915*** ## (0.071) (0.072) ## ## --------------------------------------------------------------------- ## Observations 5,560 5,560 ## R2 0.048 0.063 ## Adjusted R2 0.047 0.062 ## Residual Std. Error 1.644 (df = 5555) 1.631 (df = 5554) ## F Statistic 69.353*** (df = 4; 5555) 74.204*** (df = 5; 5554) ## ===================================================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 When Assumptions Fail There are many things we can try when our assumptions fail. In my opinion, the best and most interpretable way is to use a Generalized Linear Model (GLM) which is discussed in the next chapter. There are a few other things you can try which I’ll show here. But, keep in mind that these things can cause other problems. For example, to fix normality we may accidentally cause heteroskedasticity. With that in mind, here are some common methods to help a model fit better. Log-Linear, Log-Log, Linear-Log, Other Sounds like a great tongue-twister? Well, it is but it’s also three ways of specifying (i.e. deciding what is in) your model better. Log-Linear is where we adjust the outcome variable by a natural log transformation. This is done easily in R: df$log_outcome &lt;- log(df$outcome) lm(log_outcome ~ var1, data=df) Log-Log is where we adjust both the outcome and the predictor variable with a log transformation. This is also easily done: df$log_outcome &lt;- log(df$outcome) df$log_var1 &lt;- log(df$var1) lm(log_outcome ~ log_var1, data=df) Linear-Log is where we adjsut just the predictor variable with a log transformation. And, you guessed it, this is easily done in R: df$log_var1 &lt;- log(df$var1) lm(outcome ~ log_var1 + var2, data=df) Other methods such as square rooting the outcome or using some power function (e.g. square, cube) are also quite common. There are functions that look for the best transformation to use. However, I will not cover it here since I think GLM’s are better. So if you want to learn about other ways to help your linear model go to the next chapter. "],
["chapter-5-generalized-linear-models.html", "Chapter 5: Generalized Linear Models Logistic Regression Poisson Regression Beta Regression", " Chapter 5: Generalized Linear Models Generalized Linear Models (GLM’s) are extensions of linear regression to areas where assumptions of normality and homoskedasticity do not hold. There are several versions of GLM’s, each for different types and distributions of outcomes. We are going to go through several of the most common. This chapter is to introduce the method very briefly and demonstrate how to perform one in R. We do not delve into the details of each method much, but rather focus on showing the quirks of the coding. We discuss: Logistic Regression Poisson Regression GLM with Gamma distribution Negative binomial Beta Regression Logistic Regression For binary outcomes (e.g., yes or no, correct or incorrect, sick or healthy), logistic regression is a fantastic tool that provides useful and interpretable information. Much like simple and multiple linear regression, logistic regression15 uses dummy coding and provides coefficients that tell us the relationship between the outcome and the independent variables. Since the outcome is binary, we use a statistical transformation to make things work well. This makes it so the outcome is in “log-odds.” A simple exponentiation of the coefficients and we get very useful “odds ratios.” These are very common in many fields using binary data. Luckily, running a logistic regression is simple in R. We first create the binary outcome variable called dep. We use a new function called mutate to create a new variable (we could do this a number of ways but this is probably the cleanest way). ## First creating binary depression variable df &lt;- df %&gt;% mutate(dep = dpq010 + dpq020 + dpq030 + dpq040 + dpq050 + dpq060 + dpq070 + dpq080 + dpq090 + dpq100) %&gt;% mutate(dep2 = ifelse(dep &gt;= 16, 1, ifelse(dep &lt; 16, 0, NA))) Note that we added the values from the ten variables that give us an overall depression score (dep). We then use ifelse() to create a binary version of depression called dep2 with a cutoff of \\(\\geq 16\\) meaning depressed. Because there are missing values denoted as “NA” in this variable, we use a “nested ifelse” to say: IF depression \\(\\geq 16\\) then dep2 is 1, IF dpression \\(&lt; 16\\), then dep2 is 0, ELSE dep2 is NA. Note that these nested ifelse() statements can be as long as you want. We further need to clean up the asthma and sedentary variables. ## Fix some placeholders df &lt;- df %&gt;% mutate(asthma = washer(mcq010, 9), asthma = washer(asthma, 2, value = 0)) %&gt;% mutate(sed = washer(pad680, 9999, 7777)) Now let’s run the logistic regression: l_fit &lt;- glm(dep2 ~ asthma + sed + race + famsize, data = df, family = &quot;binomial&quot;) summary(l_fit) ## ## Call: ## glm(formula = dep2 ~ asthma + sed + race + famsize, family = &quot;binomial&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.6129 -0.3620 -0.3464 -0.2963 2.6367 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -3.1384716 0.3572769 -8.784 &lt; 2e-16 *** ## asthma 0.4973253 0.1746181 2.848 0.00440 ** ## sed 0.0002103 0.0003729 0.564 0.57269 ## raceOtherHispanic 0.9539745 0.3469520 2.750 0.00597 ** ## raceWhite 0.3207768 0.3245121 0.988 0.32291 ## raceBlack 0.3348622 0.3342378 1.002 0.31641 ## raceOther -0.2677802 0.3936198 -0.680 0.49631 ## famsize -0.0158987 0.0472355 -0.337 0.73643 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 1418.5 on 2975 degrees of freedom ## Residual deviance: 1391.2 on 2968 degrees of freedom ## (2584 observations deleted due to missingness) ## AIC: 1407.2 ## ## Number of Fisher Scoring iterations: 6 We used glm() (stands for generalized linear model). The key to making it logistic, since you can use glm() for a linear model using maximum likelihood instead of lm() with least squares, is family = &quot;binomial&quot;. This tells R to do a logistic regression. Poisson Regression As we did in logistic regression, we will use the glm() function. The difference here is we will be using an outcome that is a count variable. For example, the sedentary variable (sed) that we have in df is a count of the minutes of sedentary activity. p_fit &lt;- glm(sed ~ asthma + race + famsize, data = df, family = &quot;poisson&quot;) summary(p_fit) ## ## Call: ## glm(formula = sed ~ asthma + race + famsize, family = &quot;poisson&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -27.542 -8.595 -1.587 6.169 36.690 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.663921 0.003127 1811.08 &lt;2e-16 *** ## asthma 0.065415 0.001953 33.49 &lt;2e-16 *** ## raceOtherHispanic 0.146163 0.003595 40.65 &lt;2e-16 *** ## raceWhite 0.365433 0.002954 123.70 &lt;2e-16 *** ## raceBlack 0.350219 0.003029 115.64 &lt;2e-16 *** ## raceOther 0.351388 0.003174 110.72 &lt;2e-16 *** ## famsize -0.030385 0.000439 -69.21 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 632927 on 5526 degrees of freedom ## Residual deviance: 598697 on 5520 degrees of freedom ## (33 observations deleted due to missingness) ## AIC: 640377 ## ## Number of Fisher Scoring iterations: 5 Sedentary may be over-dispersed (see plot) and so other methods related to poisson may be necessary. For this book, we are not going to be delving into these in depth but we will introduce some below. Gamma Regression with a gamma distribution are often found when analyzing costs in dollars. It is very similar to poisson but does not require integers and can handle more dispersion. However, the outcome must have values \\(&gt; 0\\). Just for demonstration: ## Adjust sed df$sed_gamma &lt;- df$sed + .01 g_fit &lt;- glm(sed_gamma ~ asthma + race + famsize, data = df, family = &quot;Gamma&quot;) summary(g_fit) ## ## Call: ## glm(formula = sed_gamma ~ asthma + race + famsize, family = &quot;Gamma&quot;, ## data = df) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -4.3508 -0.4796 -0.0821 0.3150 1.7234 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.563e-03 1.029e-04 34.627 &lt; 2e-16 *** ## asthma -1.725e-04 5.459e-05 -3.161 0.00158 ** ## raceOtherHispanic -5.365e-04 1.186e-04 -4.524 6.20e-06 *** ## raceWhite -1.173e-03 9.817e-05 -11.952 &lt; 2e-16 *** ## raceBlack -1.134e-03 1.001e-04 -11.335 &lt; 2e-16 *** ## raceOther -1.139e-03 1.037e-04 -10.988 &lt; 2e-16 *** ## famsize 8.474e-05 1.289e-05 6.574 5.34e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Gamma family taken to be 0.3038675) ## ## Null deviance: 2162.0 on 5526 degrees of freedom ## Residual deviance: 2061.3 on 5520 degrees of freedom ## (33 observations deleted due to missingness) ## AIC: 73594 ## ## Number of Fisher Scoring iterations: 5 Two-Part or Hurdle Models We are going to use the pscl package to run a hurdle model. These models are built for situations where there is a count variable with many zeros (“zero-inflated”). The hurdle model makes slightly different assumptions regarding the zeros than the pure negative binomial that we present next. The hurdle consists of two models: one for whether the person had a zero or more (binomial) and if more than zero, how many (poisson). To run a hurdle model, we are going to make a sedentary variable with many more zeros to illustrate and then we will run a hurdle model. ## Zero inflated sedentary (don&#39;t worry too much about the specifics) df$sed_zero = ifelse(sample(1:100, size = length(df$sed), replace=TRUE) %in% c(5,10,11,20:25), 0, df$sed) ## Hurdle model library(pscl) h_fit = hurdle(sed_zero ~ asthma + race + famsize, data = df) summary(h_fit) ## ## Call: ## hurdle(formula = sed_zero ~ asthma + race + famsize, data = df) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -3.8678 -1.5330 -0.2287 1.3298 11.3344 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.6706255 0.0032558 1741.69 &lt;2e-16 *** ## asthma 0.0566424 0.0020557 27.55 &lt;2e-16 *** ## raceOtherHispanic 0.1361997 0.0037409 36.41 &lt;2e-16 *** ## raceWhite 0.3656549 0.0030684 119.17 &lt;2e-16 *** ## raceBlack 0.3456656 0.0031479 109.81 &lt;2e-16 *** ## raceOther 0.3517995 0.0032843 107.11 &lt;2e-16 *** ## famsize -0.0319658 0.0004628 -69.07 &lt;2e-16 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.80646 0.20568 13.645 &lt;2e-16 *** ## asthma -0.06620 0.13253 -0.500 0.6174 ## raceOtherHispanic -0.21741 0.23207 -0.937 0.3489 ## raceWhite -0.43178 0.19212 -2.247 0.0246 * ## raceBlack -0.42274 0.19645 -2.152 0.0314 * ## raceOther -0.04408 0.21652 -0.204 0.8387 ## famsize -0.04287 0.02874 -1.492 0.1358 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 12 ## Log-likelihood: -2.934e+05 on 14 Df Notice that the output has two parts: “Count model coefficients (truncated poisson with log link):” and “Zero hurdle model coefficients (binomial with logit link):”. Together they tell us about the relationship between the predictors and a count variable with many zeros. Negative Binomial Similar to that above, negative binomial is for zero-inflated counts. It makes slightly different assumptions than the hurdle. Beta Regression Technically, logistic regression is a linear regression model.↩ "],
["chapter-6-multilevel-modeling.html", "Chapter 6: Multilevel Modeling", " Chapter 6: Multilevel Modeling "],
["chapter-7-other-modeling-techniques.html", "Chapter 7: Other Modeling Techniques", " Chapter 7: Other Modeling Techniques "],
["chapter-8-advanced-data-manipulation.html", "Chapter 8: Advanced Data Manipulation", " Chapter 8: Advanced Data Manipulation "],
["chapter-9-advanced-plotting.html", "Chapter 9: Advanced Plotting", " Chapter 9: Advanced Plotting "],
["chapter-10-where-to-go-from-here.html", "Chapter 10: Where to go from here", " Chapter 10: Where to go from here "]
]
